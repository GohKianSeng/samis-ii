------------------------------------------------------------
-- This script is generated by SQLDBDiff V3.5.1
-- http://www.sqldbtools.com 
-- 8/23/2012 11:50:14 PM
-- Notes : 
--   Script generate by SQLDBDiff may need some adjustement, code review the code before deployement in test environements 
--   Run your script against test environements before any deployement in production 
------------------------------------------------------------

USE [DOS]
GO

---$ Create table dbo.tb_emailContent
IF OBJECT_ID(N'dbo.tb_emailContent') IS NULL
BEGIN
    PRINT 'Create table dbo.tb_emailContent'
    CREATE TABLE dbo.tb_emailContent
    (
        EmailID INT IDENTITY(1,1) NOT NULL,
        EmailType VARCHAR(100) NOT NULL,
        EmailContent VARCHAR(max) NOT NULL
    )
    ON [PRIMARY] 
END
GO


---$ Alter table dbo.tb_school
PRINT 'Alter table dbo.tb_school alter column SchoolID'
ALTER TABLE dbo.tb_school
    ALTER COLUMN SchoolID INT IDENTITY(1,1) NOT NULL
GO


---$ Alter Function dbo.udf_UrlEncode 
IF OBJECT_ID(N'dbo.udf_UrlEncode') IS NULL
BEGIN
    PRINT 'Create function : dbo.udf_UrlEncode'
    exec ('create function dbo.udf_UrlEncode() returns int as begin return 0 end') 
END
GO

PRINT 'Alter function : dbo.udf_UrlEncode'
GO

ALTER FUNCTION  [dbo].[udf_UrlEncode](@url VARCHAR(MAX))
RETURNS NVARCHAR(MAX)
AS
BEGIN
    DECLARE @count INT, @c NCHAR(1), @i INT, @urlReturn VARCHAR(MAX);
    SET @count = LEN(@url);
    SET @i = 1;
    SET @urlReturn = '';    
    WHILE (@i <= @count)
     BEGIN
        SET @c = SUBSTRING(@url, @i, 1)
        IF @c LIKE N'[A-Za-z0-9()''*\-._!~]' COLLATE Latin1_General_BIN ESCAPE N'\' COLLATE Latin1_General_BIN
         BEGIN
            SET @urlReturn = @urlReturn + @c;
         END;
        ELSE
         BEGIN
            SET @urlReturn = 
                   @urlReturn + '%'
                   + SUBSTRING(sys.fn_varbintohexstr(CAST(@c AS VARBINARY(MAX))),3,2)
                   + ISNULL(NULLIF(SUBSTRING(sys.fn_varbintohexstr(CAST(@c AS VARBINARY(MAX))),5,2), '00'), '');
         END;
        SET @i = @i +1;
     END;
    RETURN @urlReturn
END

GO

---$ Alter Procedure dbo.usp_addNewCourseVisitorParticipant 
IF OBJECT_ID(N'dbo.usp_addNewCourseVisitorParticipant') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_addNewCourseVisitorParticipant'
    EXECUTE('CREATE PROCEDURE dbo.usp_addNewCourseVisitorParticipant AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_addNewCourseVisitorParticipant'
GO

ALTER PROCEDURE [dbo].[usp_addNewCourseVisitorParticipant]
(@nric VARCHAR(10),
@course VARCHAR(10),
@salutation VARCHAR(10),
@english_name VARCHAR(50),
@dob DATE,
@gender VARCHAR(1),
@education VARCHAR(10),
@nationality VARCHAR(10),
@occupation VARCHAR(10),
@postal_code VARCHAR(6),
@blk_house  VARCHAR(10),
@street_address  VARCHAR(1000),
@unit  VARCHAR(10),
@contact  VARCHAR(15),
@email  VARCHAR(100),
@church INT,
@church_others VARCHAR(100), @UserID VARCHAR(50))
AS
SET NOCOUNT ON;

IF EXISTS (SELECT 1 FROM dbo.tb_visitors WHERE NRIC = @nric)
OR EXISTS (SELECT 1 FROM dbo.tb_members WHERE NRIC = @nric)
BEGIN
	SELECT 'NRICEXISTS' AS Result, '' AS SalutationName, @english_name AS EnglishName, '' AS CourseName
END
ELSE
BEGIN
	
	if(len(@postal_code) = 0)
	BEGIN
		SET @postal_code = null;
	END
	if(@dob = CONVERT(DATE, '',103))
	BEGIN
		SET @dob = NULL;
	END
	
	INSERT INTO dbo.tb_visitors(Salutation, NRIC, EnglishName, DOB, Gender, Education, Occupation, Nationality, Email, Contact, AddressStreet, AddressHouseBlk, AddressPostalCode, AddressUnit, VisitorType, Church, ChurchOthers)
	SELECT @salutation, @nric, @english_name, @dob, @gender, @education, @occupation, @nationality, @email, @contact, @street_address, @blk_house, @postal_code, @unit, 1, @church, @church_others
	
	INSERT INTO dbo.tb_course_participant(NRIC, courseID)
	SELECT @nric, @course;
	
	DECLARE @newVisitorXML XML = (
	SELECT  C.SalutationName, A.EnglishName, A.AddressUnit,
			A.AddressHouseBlk, ISNULL(D.CountryName, '') AS Nationality, F.OccupationName AS Occupation,
			A.NRIC,
			A.DOB, dbo.udf_getGender(A.Gender) AS Gender, A.AddressStreet,
			ISNULL(CONVERT(VARCHAR(7), A.AddressPostalCode), '') AS AddressPostalCode, A.Email, dbo.udf_getEducation(A.Education) AS Education,
			A.Contact, A.Church, A.ChurchOthers
	FROM dbo.tb_visitors AS A
	LEFT OUTER JOIN dbo.tb_Salutation AS C ON A.Salutation = C.SalutationID
	LEFT OUTER JOIN dbo.tb_country AS D ON A.Nationality = D.CountryID
	LEFT OUTER JOIN dbo.tb_occupation AS F ON A.Occupation = F.OccupationID	
	WHERE A.NRIC = @nric
	FOR XML PATH, ELEMENTS)
	
	DECLARE @temp table(a INT)
	INSERT INTO @temp(a)
	EXEC dbo.usp_insertlogging 'I', @UserID, 'VisitorMembership', 'New', 1, 'NRIC', @nric, @newVisitorXML;
	
	SELECT 'OK' AS Result, ISNULL(D.SalutationName, '') AS SalutationName, B.EnglishName, C.CourseName FROM dbo.tb_course_participant AS A
	INNER JOIN dbo.tb_visitors AS B ON B.NRIC = A.NRIC
	INNER JOIN dbo.tb_course AS C ON A.courseID = C.courseID
	LEFT OUTER JOIN dbo.tb_Salutation AS D ON D.SalutationID = B.Salutation
	WHERE A.NRIC = @nric AND A.courseID = @course
END

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_checkUserLogin 
IF OBJECT_ID(N'dbo.usp_checkUserLogin') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_checkUserLogin'
    EXECUTE('CREATE PROCEDURE dbo.usp_checkUserLogin AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_checkUserLogin'
GO

ALTER PROCEDURE [dbo].[usp_checkUserLogin]
(@UserID VARCHAR(50),
 @Password VARCHAR(40))
AS
SET NOCOUNT ON;

SELECT (SELECT UserID, Name, Email, Phone, Mobile, Department, ISNULL(Style,'') AS Style, NRIC FROM dbo.tb_Users 
WHERE UserID = @UserID AND [Password] = @Password
FOR XML RAW('UserInformation'), ELEMENTS) AS Result

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_getAllEmail 
IF OBJECT_ID(N'dbo.usp_getAllEmail') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_getAllEmail'
    EXECUTE('CREATE PROCEDURE dbo.usp_getAllEmail AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_getAllEmail'
GO

ALTER PROCEDURE [dbo].[usp_getAllEmail]

AS
SET NOCOUNT ON;

	Select EmailType, EmailContent FROM dbo.tb_emailContent
	

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_getAllEmailInXML 
IF OBJECT_ID(N'dbo.usp_getAllEmailInXML') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_getAllEmailInXML'
    EXECUTE('CREATE PROCEDURE dbo.usp_getAllEmailInXML AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_getAllEmailInXML'
GO

ALTER PROCEDURE [dbo].[usp_getAllEmailInXML]

AS
SET NOCOUNT ON;

	DECLARE @XML XML = (select EmailID, EmailType, EmailContent from dbo.tb_emailContent FOR XML PATH('Email'), ROOT('ChurchEmail'));
	SELECT @XML AS [XML] WHERE LEN(CONVERT(VARCHAR(MAX), @XML)) > 0;	

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_getAllStaff 
IF OBJECT_ID(N'dbo.usp_getAllStaff') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_getAllStaff'
    EXECUTE('CREATE PROCEDURE dbo.usp_getAllStaff AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_getAllStaff'
GO

ALTER PROCEDURE [dbo].[usp_getAllStaff]

AS
SET NOCOUNT ON;

	Select RTRIM(LTRIM(ISNULL(B.StyleName, '') + ' ' + Name)) AS Name, A.USERID, Email, Phone, Mobile, Department, ISNULL(D.RoleName, 'Unspecified') AS RoleName FROM tb_users AS A
	LEFT OUTER JOIN dbo.tb_style AS B ON A.Style = B.StyleID
	LEFT OUTER JOIN dbo.tb_Roles_Users AS C ON C.UserID = A.UserID
	LEFT OUTER JOIN dbo.tb_Roles AS D ON D.RoleID = C.RoleID
	

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_getMembersTempReportingManualSearch 
IF OBJECT_ID(N'dbo.usp_getMembersTempReportingManualSearch') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_getMembersTempReportingManualSearch'
    EXECUTE('CREATE PROCEDURE dbo.usp_getMembersTempReportingManualSearch AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_getMembersTempReportingManualSearch'
GO

ALTER PROCEDURE [dbo].[usp_getMembersTempReportingManualSearch]
(@gender VARCHAR(3),
@marriage VARCHAR(3),
@nationality VARCHAR(3),
@dialect VARCHAR(3),
@education VARCHAR(3),
@occupation VARCHAR(3),
@congregation VARCHAR(3),
@language VARCHAR(3),
@cellgroup VARCHAR(3),
@ministry VARCHAR(3),
@batismchurch VARCHAR(3),
@confirmchurch VARCHAR(3),
@previouschurch VARCHAR(3),
@baptismby VARCHAR(3),
@confirmby VARCHAR(3),
@residentalarea VARCHAR(200), @UserID VARCHAR(50))
AS
SET NOCOUNT ON;

DECLARE @allMember TABLE(NRIC VARCHAR(20))
DECLARE @congregationTable Table (congregationID TINYINT)


declare 
@tgender VARCHAR(3) = @gender,
@tmarriage VARCHAR(3) = @marriage,
@tnationality VARCHAR(3) = @nationality,
@tdialect VARCHAR(3) = @dialect,
@teducation VARCHAR(3) = @education,
@toccupation VARCHAR(3) = @occupation,
@tcongregation VARCHAR(3) = @congregation,
@tlanguage VARCHAR(3) = @language,
@tcellgroup VARCHAR(3) = @cellgroup,
@tministry VARCHAR(3) = @ministry,
@tbatismchurch VARCHAR(3) = @batismchurch,
@tconfirmchurch VARCHAR(3) = @confirmchurch,
@tpreviouschurch VARCHAR(3) = @previouschurch,
@tbaptismby VARCHAR(3) = @baptismby,
@tconfirmby VARCHAR(3) = @confirmby,
@tresidentalarea VARCHAR(200) = @residentalarea, @tUserID VARCHAR(50) = @UserID;



INSERT INTO @congregationTable(congregationID)
select dbo.udf_getCongregationIDFromModuleFunction(functionName) from dbo.tb_modulesFunctions where Module = 'Congregation' AND functionID IN (
SELECT functionID FROM dbo.tb_Roles_ModulesFunctionsAccessRight 
WHERE RoleID = (SELECT RoleID FROM dbo.tb_Roles_Users WHERE UserID = @UserID))


INSERT INTO @allMember (NRIC)
SELECT NRIC FROM dbo.tb_membersOtherInfo_temp WHERE Congregation IN (SELECT CongregationID FROM @congregationTable)

IF(ISNULL(@tgender, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE Gender = @tgender)
END

IF(ISNULL(@tmarriage, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE MaritalStatus = @tmarriage)
END

IF(ISNULL(@tnationality, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE Nationality = @tnationality)
END

IF(ISNULL(@tdialect, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE Dialect = @tdialect)
END

IF(ISNULL(@teducation, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE Education = @teducation)
END

IF(ISNULL(@toccupation, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE Occupation = @toccupation)
END

IF(ISNULL(@tcongregation, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_membersOtherInfo_temp WHERE Congregation = @tcongregation)
END

IF(ISNULL(@tcellgroup, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_membersOtherInfo_temp WHERE CellGroup = @tcellgroup)
END

IF(ISNULL(@tbatismchurch, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE BaptismChurch = @tbatismchurch)
END

IF(ISNULL(@tconfirmchurch, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE ConfirmChurch = @tconfirmchurch)
END

IF(ISNULL(@tpreviouschurch, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE PreviousChurch = @tpreviouschurch)
END

IF(ISNULL(@tbaptismby, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE BaptismBy = @tbaptismby)
END

IF(ISNULL(@tconfirmby, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE ConfirmBy = @tconfirmby)
END

IF(ISNULL(@tlanguage, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM tb_members_temp AS A WHERE 1 = (SELECT 1 FROM dbo.udf_Split(A.[Language],',') WHERE items = @tlanguage))
END

IF(ISNULL(@tministry, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM tb_membersOtherInfo_temp AS A WHERE 1 = (SELECT 1 FROM dbo.udf_Split(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(8000), A.MinistryInvolvement),'<Ministry/>',''),'</MinistryID><MinistryID>',','),'<Ministry><MinistryID>',''),'</MinistryID></Ministry>',''), ',') WHERE items = @tministry))
END

IF(ISNULL(@tresidentalarea, '-') <> '-')
BEGIN
	DELETE FROM @allMember WHERE NRIC NOT IN (SELECT NRIC FROM dbo.tb_members_temp WHERE SUBSTRING(CONVERT(VARCHAR(7),AddressPostalCode), 1, 2) IN (SELECT RTRIM(LTRIM(ITEMS)) FROM dbo.udf_Split(@tresidentalarea, ',')))
END












DECLARE @CurrentParish TINYINT
SELECT @CurrentParish = CONVERT(TINYINT,value) FROM dbo.tb_App_Config WHERE ConfigName = 'currentparish'
SELECT	D.CongregationName, A.EnglishName, A.ChineseName, A.DOB, dbo.udf_getGender(A.Gender) AS Gender, A.NRIC,
		dbo.udf_getMaritialStatus(A.MaritalStatus) AS MaritalStatus, E.CountryName AS Nationality, dbo.udf_getDialect(A.Dialect) AS Dialect,
		A.HomeTel, A.MobileTel, dbo.udf_getLanguages(A.[Language]) AS Languages, F.OccupationName, dbo.udf_getEducation(A.Education) AS Education,
		A.BaptismDate, dbo.udf_getStafforMemberName(A.BaptismBy) AS BaptismBy, H.ParishName AS BaptismChurch,
		A.ConfirmDate, dbo.udf_getStafforMemberName(a.ConfirmBy) AS ConfirmBy, I.ParishName AS ConfirmChurch, J.ParishName AS PreviousChurch,
		ISNULL(CONVERT(VARCHAR(MAX), B.ElectoralRoll, 103), '') AS ElectoralRoll, B.MemberDate,
		dbo.udf_getMinistry(CONVERT(VARCHAR(MAX),B.MinistryInvolvement)) AS MinistryInvolvement,
		ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, A.MarriageDate, 103), GETDATE()),'') AS MarriageDurationYears,
		ISNULL(DATEDIFF(YEAR, CONVERT(DATETIME, A.DOB, 103), GETDATE()),'') AS Age,
		ISNULL(K.CellgroupName, '') AS Cellgroup, A.Email
		
FROM dbo.tb_membersOtherInfo_temp AS B 
INNER JOIN dbo.tb_members_temp AS A ON A.NRIC = B.NRIC
INNER JOIN dbo.tb_parish AS C ON C.ParishID = A.CurrentParish
INNER JOIN dbo.tb_congregation AS D ON D.CongregationID = B.Congregation
INNER JOIN dbo.tb_country AS E ON A.Nationality = E.CountryID
INNER JOIN dbo.tb_occupation AS F ON A.Occupation = F.OccupationID
LEFT OUTER JOIN dbo.tb_Users AS G ON A.BaptismBy = G.UserID
LEFT OUTER JOIN dbo.tb_parish AS H ON H.ParishID = A.BaptismChurch
LEFT OUTER JOIN dbo.tb_parish AS I ON I.ParishID = A.ConfirmChurch
LEFT OUTER JOIN dbo.tb_parish AS J ON J.ParishID = A.PreviousChurch
LEFT OUTER JOIN dbo.tb_cellgroup AS K ON K.CellgroupID = B.CellGroup
WHERE A.CurrentParish = @CurrentParish AND B.NRIC IN (SELECT NRIC FROM @allMember)

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_getUserInformation 
IF OBJECT_ID(N'dbo.usp_getUserInformation') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_getUserInformation'
    EXECUTE('CREATE PROCEDURE dbo.usp_getUserInformation AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_getUserInformation'
GO

ALTER PROCEDURE [dbo].[usp_getUserInformation]
(@UserID VARCHAR(50))
AS
SET NOCOUNT ON;

	SELECT UserID, Name, Email, Phone, Mobile, Department, NRIC, ISNULL(Style,'') AS Style FROM dbo.tb_Users
	WHERE UserID = @UserID
	FOR XML RAW('UserInformation'), ELEMENTS
	

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_searchMembersForUpdate 
IF OBJECT_ID(N'dbo.usp_searchMembersForUpdate') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_searchMembersForUpdate'
    EXECUTE('CREATE PROCEDURE dbo.usp_searchMembersForUpdate AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_searchMembersForUpdate'
GO

ALTER PROCEDURE [dbo].[usp_searchMembersForUpdate]
(@NRIC VARCHAR(10),
 @Name VARCHAR(50), @UserID VARCHAR(50))
AS
SET NOCOUNT ON;

DECLARE @CurrentParish TINYINT
DECLARE @congregationTable Table (congregationID TINYINT)

INSERT INTO @congregationTable(congregationID)
select dbo.udf_getCongregationIDFromModuleFunction(functionName) from dbo.tb_modulesFunctions where Module = 'Congregation' AND functionID IN (
SELECT functionID FROM dbo.tb_Roles_ModulesFunctionsAccessRight 
WHERE RoleID = (SELECT RoleID FROM dbo.tb_Roles_Users WHERE UserID = @UserID))

SELECT @CurrentParish = CONVERT(TINYINT,value) FROM dbo.tb_App_Config WHERE ConfigName = 'currentparish'

IF(LEN(@NRIC) > 0 AND LEN(@Name) > 0)
BEGIN
	SELECT TOP 100 A.NRIC, C.SalutationName +' '+EnglishName AS Name, DOB, dbo.udf_getGender(Gender) AS Gender, B.CountryName AS Nationality, dbo.udf_getMaritialStatus(MaritalStatus) AS MaritalStatus, Email, HomeTel, MobileTel 
	FROM dbo.tb_members AS A
	INNER JOIN dbo.tb_country AS B ON A.Nationality = B.CountryID
	INNER JOIN dbo.tb_Salutation AS C ON A.Salutation = C.SalutationID
	INNER JOIN dbo.tb_membersOtherInfo AS D ON A.NRIC = D.NRIC
	WHERE (A.NRIC LIKE '%'+@NRIC+'%' OR EnglishName LIKE '%'+@Name+'%')
	AND CurrentParish = @CurrentParish AND D.Congregation IN (SELECT congregationID FROM @congregationTable)
	ORDER BY Name, NRIC
END

ELSE IF(LEN(@Name) = 0)
BEGIN
	SELECT TOP 100 A.NRIC, C.SalutationName +' '+EnglishName AS Name, DOB, dbo.udf_getGender(Gender) AS Gender, B.CountryName AS Nationality, dbo.udf_getMaritialStatus(MaritalStatus) AS MaritalStatus, Email, HomeTel, MobileTel 
	FROM dbo.tb_members AS A
	INNER JOIN dbo.tb_country AS B ON A.Nationality = B.CountryID
	INNER JOIN dbo.tb_Salutation AS C ON A.Salutation = C.SalutationID
	INNER JOIN dbo.tb_membersOtherInfo AS D ON A.NRIC = D.NRIC
	WHERE A.NRIC LIKE '%'+@NRIC+'%'
	AND CurrentParish = @CurrentParish AND D.Congregation IN (SELECT congregationID FROM @congregationTable)
END
ELSE
BEGIN
	SELECT TOP 100 A.NRIC, C.SalutationName +' '+EnglishName AS Name, DOB, dbo.udf_getGender(Gender) AS Gender, B.CountryName AS Nationality, dbo.udf_getMaritialStatus(MaritalStatus) AS MaritalStatus, Email, HomeTel, MobileTel 
	FROM dbo.tb_members AS A
	INNER JOIN dbo.tb_country AS B ON A.Nationality = B.CountryID
	INNER JOIN dbo.tb_Salutation AS C ON A.Salutation = C.SalutationID
	INNER JOIN dbo.tb_membersOtherInfo AS D ON A.NRIC = D.NRIC
	WHERE EnglishName LIKE '%'+@Name+'%'
	AND CurrentParish = @CurrentParish AND D.Congregation IN (SELECT congregationID FROM @congregationTable)
	ORDER BY Name
END

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_searchName 
IF OBJECT_ID(N'dbo.usp_searchName') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_searchName'
    EXECUTE('CREATE PROCEDURE dbo.usp_searchName AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_searchName'
GO

ALTER PROCEDURE [dbo].[usp_searchName]
(@searchText VARCHAR(100))
 
AS
SET NOCOUNT ON;

DECLARE @CurrentParish TINYINT
SELECT @CurrentParish = CONVERT(TINYINT,value) FROM dbo.tb_App_Config WHERE ConfigName = 'currentparish'

SELECT (select ISNULL(B.ICPhoto,'') AS ICPhoto, ISNULL(Name,'') + ISNULL(B.EnglishName,'') AS Name, ISNULL(A.NRIC,'') + ISNULL(B.NRIC,'') AS NRIC, ISNULL(A.Email,'') + ISNULL(B.Email,'') + ' ' AS Email from dbo.tb_Users AS A
Full JOIN dbo.tb_members AS B ON B.NRIC = A.NRIC
WHERE A.Name like '%'+@searchText+'%' OR B.EnglishName like '%'+@searchText+'%' AND B.CurrentParish = @CurrentParish
ORDER BY ISNULL(Name,'') + ISNULL(B.EnglishName,'') ASC
FOR XML PATH('found'), Elements, Root('Root')) AS Result

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_UpdateEmail 
IF OBJECT_ID(N'dbo.usp_UpdateEmail') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_UpdateEmail'
    EXECUTE('CREATE PROCEDURE dbo.usp_UpdateEmail AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_UpdateEmail'
GO

ALTER PROCEDURE [dbo].[usp_UpdateEmail]
(@xml XML)
AS
SET NOCOUNT ON;

	DECLARE @xdoc int;
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @xml;
	
	DECLARE @table AS TABLE (EmailID VARCHAR(10), EmailContent VARCHAR(MAX))
	INSERT INTO @table(EmailID, EmailContent)
	Select EmailID, EmailContent
	from OpenXml(@xdoc, '/ChurchEmail/*')
	with (
	EmailID VARCHAR(10) './EmailID',
	EmailContent VARCHAR(MAX) './EmailContent');		
	
	UPDATE dbo.tb_emailContent SET dbo.tb_emailContent.EmailContent = A.EmailContent
	FROM @table AS A
	WHERE A.EmailID = dbo.tb_emailContent.EmailID
	
	SELECT 'Email updated.' AS Result

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_updateMember 
IF OBJECT_ID(N'dbo.usp_updateMember') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_updateMember'
    EXECUTE('CREATE PROCEDURE dbo.usp_updateMember AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_updateMember'
GO

ALTER PROCEDURE [dbo].[usp_updateMember]
(@updateXML XML)
AS
SET NOCOUNT ON;

DECLARE @UserID VARCHAR(50),
@candidate_original_nric VARCHAR(20),
@candidate_salutation VARCHAR(4),
@candidate_photo VARCHAR(1000),
@candidate_english_name VARCHAR(50),
@candidate_unit VARCHAR(10),
@candidate_blk_house VARCHAR(10),
@candidate_nationality VARCHAR(4),
@candidate_dialect VARCHAR(4),
@candidate_occupation VARCHAR(4),
@baptized_by VARCHAR(50),
@baptism_church VARCHAR(4),
@confirmation_by VARCHAR(50),
@confirmation_church VARCHAR(4),
@previous_church_membership VARCHAR(4),
@candidate_chinses_name NVARCHAR(50),
@candidate_nric VARCHAR(20),
@candidate_dob DATETIME,
@candidate_gender VARCHAR(1),
@candidate_marital_status VARCHAR(3),
@candidate_street_address VARCHAR(1000),
@candidate_postal_code INT,
@candidate_email VARCHAR(100),
@candidate_education VARCHAR(3),
@candidate_language VARCHAR(200),
@candidate_home_tel VARCHAR(15),
@candidate_mobile_tel VARCHAR(15),
@candidate_baptism_date VARCHAR(15),
@candidate_confirmation_date VARCHAR(15),
@candidate_marriage_date VARCHAR(15),
@candidate_congregation VARCHAR(3),
@candidate_electoralroll VARCHAR(15),
@candidate_cellgroup VARCHAR(3),
@candidate_sponsor1 VARCHAR(20),
@candidate_sponsor2 VARCHAR(100),
@candidate_sponsor2contact VARCHAR(100),
@candidate_transfer_reason VARCHAR(1000),
@candidate_ministry XML,
@candidate_DeceasedDate VARCHAR(15),
@candidate_MemberDate VARCHAR(15),
@candidate_cariu VARCHAR(20),
@candidate_remarks VARCHAR(1000),
@family XML,
@child XML,
@baptism_by_others VARCHAR(100),
@confirm_by_others VARCHAR(100),
@baptism_church_others VARCHAR(100),
@confirm_church_others VARCHAR(100),
@previous_church_others VARCHAR(100),
@transferTo VARCHAR(100),
@transferToDate VARCHAR(15),
@Filename VARCHAR(200),
@GUID VARCHAR(50),
@Filetype VARCHAR(3),
@Fileremarks VARCHAR(1000)


	DECLARE @idoc int;
	EXEC sp_xml_preparedocument @idoc OUTPUT, @updateXML;
	
    SELECT @UserID = EnteredBy, @candidate_original_nric = OriginalNric, @candidate_nric = NRIC, @candidate_salutation = Salutation,
	@candidate_english_name = EnglishName, @candidate_chinses_name = ChineseName, @candidate_gender = Gender, @candidate_dob = CONVERT(DATETIME, DOB, 103),
	@candidate_marital_status = MaritalStatus, @candidate_marriage_date = MarriageDate, @candidate_nationality = Nationality,
	@candidate_dialect = Dialect, @candidate_photo = Photo, @candidate_street_address = AddressStreetName, @candidate_blk_house = AddressBlkHouse,
	@candidate_postal_code = AddressPostalCode, @candidate_unit = AddressUnit, @candidate_home_tel = HomeTel, @candidate_mobile_tel = MobileTel,
	@candidate_email = Email, @candidate_education = Education, @candidate_language = [Language], @candidate_occupation = Occupation,
	@baptized_by = BaptismBy, @candidate_baptism_date = BaptismDate, @baptism_church = BaptismChurch, @confirmation_by = ConfirmationBy,
	@confirmation_church = ConfirmationChurch, @candidate_confirmation_date = ConfirmationDate, @previous_church_membership = PreviousChurchMembership,
	@family = FamilyXML, @child = ChildXML, @candidate_sponsor1 = Sponsor1, @candidate_sponsor2 = Sponsor2, @candidate_sponsor2contact = Sponsor2Contact, @candidate_electoralroll = ElectoralRoll,
	@candidate_remarks = Remarks, @candidate_cariu = CarIU, @candidate_transfer_reason = TransferReason, @candidate_cellgroup = Cellgroup, @candidate_ministry = MinistryInvolvement, @candidate_DeceasedDate = DeceasedDate, @candidate_MemberDate = MemberDate, @candidate_congregation = Congregation,
	@baptism_by_others = BaptismByOthers, @confirm_by_others = ConfirmByOthers, @baptism_church_others = BaptismChurchOthers, @confirm_church_others = ConfirmChurchOthers, @previous_church_others = PreviousChurchOthers,
	@transferTo = TransferTo, @transferToDate = TransferToDate,
	@Filename = [Filename], @GUID = [GUID], @Filetype = Filetype, @Fileremarks = Fileremarks
	FROM OPENXML(@idoc, '/Update')
	WITH (
	[Filename] VARCHAR(200)'./Filename',
	[GUID] VARCHAR(50)'./GUID',
	Filetype VARCHAR(3)'./Filetype',
	Fileremarks VARCHAR(1000)'./FileRemarks',	
	EnteredBy VARCHAR(50)'./EnteredBy',
	OriginalNric VARCHAR(20)'./OriginalNRIC',
	NRIC VARCHAR(20)'./NRIC',
	Salutation VARCHAR(3) './Salutation',
	EnglishName VARCHAR(50) './EnglishName',
	ChineseName NVARCHAR(50) './ChineseName',
	Gender VARCHAR(1) './Gender',
	DOB VARCHAR(10) './DOB',
	MaritalStatus VARCHAR(3) './MaritalStatus',
	MarriageDate VARCHAR(20) './MarriageDate',
	Nationality VARCHAR(3) './Nationality',
	Dialect VARCHAR(3) './Dialect',
	Photo VARCHAR(1000) './Photo',
	AddressStreetName VARCHAR(100) './AddressStreetName',
	AddressPostalCode INT './AddressPostalCode',
	AddressBlkHouse VARCHAR(10) './AddressBlkHouse',
	AddressUnit VARCHAR(10) './AddressUnit',
	HomeTel VARCHAR(15) './HomeTel',
	MobileTel VARCHAR(15) './MobileTel',
	Email VARCHAR(100) './Email',
	Education VARCHAR(3) './Education',
	[Language] VARCHAR(200) './Language',
	Occupation VARCHAR(3) './Occupation',
	Congregation VARCHAR(3) './Congregation',
	BaptismBy VARCHAR(20) './BaptismBy',
	BaptismDate VARCHAR(10) './BaptismDate',
	BaptismChurch VARCHAR(3) './BaptismChurch',
	ConfirmationBy VARCHAR(20) './ConfirmationBy',
	ConfirmationChurch VARCHAR(3) './ConfirmationChurch',
	ConfirmationDate VARCHAR(10) './ConfirmationDate',
	PreviousChurchMembership VARCHAR(3) './PreviousChurchMembership',
	TransferReason VARCHAR(1000) './TransferReason',
	CarIU VARCHAR(20) './CarIU',
	Remarks VARCHAR(1000) './Remarks',
	FamilyXML XML './FamilyXML/FamilyList',
	ChildXML XML './ChildXML/ChildList',
	Sponsor1 VARCHAR(20) './Sponsor1',
	Sponsor2 VARCHAR(100) './Sponsor2',
	Sponsor2Contact VARCHAR(100) './Sponsor2Contact',
	ElectoralRoll VARCHAR(10) './ElectoralRoll',
	Cellgroup VARCHAR(3) './Cellgroup',
	MinistryInvolvement XML './MinistryInvolvement/Ministry',
	MemberDate VARCHAR(10) './MemberDate',
	DeceasedDate VARCHAR(10) './DeceasedDate',
	BaptismByOthers VARCHAR(100) './BaptismByOthers',
	BaptismChurchOthers VARCHAR(100) './BaptismChurchOthers',
	ConfirmByOthers VARCHAR(100) './ConfirmByOthers',
	ConfirmChurchOthers VARCHAR(100) './ConfirmChurchOthers',
	PreviousChurchOthers VARCHAR(100) './PreviousChurchOthers',
	TransferTo VARCHAR(100) './TransferTo',
	TransferToDate VARCHAR(100) './TransferToDate');

DECLARE @rowcount INT
SET @rowcount = 0

IF(LEN(@candidate_cellgroup) = 0)
BEGIN
	SET @candidate_cellgroup = '0'
END

IF(LEN(@candidate_dialect) = 0)
BEGIN
	SET @candidate_dialect = '0'
END

IF(LEN(@previous_church_membership) = 0)
BEGIN
	SET @previous_church_membership = '0'
END

IF(LEN(@baptism_church) = 0)
BEGIN
	SET @baptism_church = '0'
END

IF(LEN(@confirmation_church) = 0)
BEGIN
	SET @confirmation_church = '0'
END

IF(LEN(@TransferToDate) = 0)
BEGIN
	SET @TransferToDate = NULL;
END

IF(LEN(@candidate_MemberDate) = 0)
BEGIN
	SET @candidate_MemberDate = NULL;
END

IF(LEN(@candidate_DeceasedDate) = 0)
BEGIN
	SET @candidate_DeceasedDate = NULL;
END

IF(LEN(@candidate_electoralroll) = 0)
BEGIN
	SET @candidate_electoralroll = NULL;
END

IF(LEN(@candidate_baptism_date) = 0)
BEGIN
	SET @candidate_baptism_date = NULL;
END

IF(LEN(@candidate_marriage_date) = 0)
BEGIN
	SET @candidate_marriage_date = NULL;
END

if(LEN(@candidate_confirmation_date) = 0)
BEGIN
	SET @candidate_confirmation_date = NULL;
END

IF EXISTS( SELECT 1 FROM dbo.tb_members WHERE NRIC = @candidate_original_nric)
BEGIN

	DECLARE @CurrentParish TINYINT
	SELECT @CurrentParish = CONVERT(TINYINT,value) FROM dbo.tb_App_Config WHERE ConfigName = 'currentparish'

	DECLARE @Orig_candidate_salutation VARCHAR(4)
	DECLARE @Orig_candidate_photo VARCHAR(1000)
	DECLARE @Orig_candidate_english_name VARCHAR(50)
	DECLARE @Orig_candidate_unit VARCHAR(10)
	DECLARE @Orig_candidate_blk_house VARCHAR(10)
	DECLARE @Orig_candidate_nationality VARCHAR(4)
	DECLARE @Orig_candidate_dialect VARCHAR(4)
	DECLARE @Orig_candidate_occupation VARCHAR(4)
	DECLARE @Orig_baptized_by VARCHAR(50)
	DECLARE @Orig_baptism_church VARCHAR(4)
	DECLARE @Orig_confirmation_by VARCHAR(50)
	DECLARE @Orig_confirmation_church VARCHAR(4)
	DECLARE @Orig_previous_church_membership VARCHAR(4)
	DECLARE @Orig_candidate_chinses_name NVARCHAR(50)
	DECLARE @Orig_candidate_nric VARCHAR(10)
	DECLARE @Orig_candidate_dob DATETIME
	DECLARE @Orig_candidate_gender VARCHAR(1)
	DECLARE @Orig_candidate_marital_status VARCHAR(3)
	DECLARE @Orig_candidate_street_address VARCHAR(1000)
	DECLARE @Orig_candidate_postal_code INT
	DECLARE @Orig_candidate_email VARCHAR(100)
	DECLARE @Orig_candidate_education VARCHAR(3)
	DECLARE @Orig_candidate_language VARCHAR(200)
	DECLARE @Orig_candidate_home_tel VARCHAR(15)
	DECLARE @Orig_candidate_mobile_tel VARCHAR(15)
	DECLARE @Orig_candidate_baptism_date VARCHAR(15)
	DECLARE @Orig_candidate_confirmation_date VARCHAR(15)
	DECLARE @Orig_candidate_marriage_date VARCHAR(15)
	DECLARE @Orig_candidate_congregation VARCHAR(3)
	DECLARE @Orig_candidate_electoralroll VARCHAR(15)
	DECLARE @Orig_candidate_cellgroup VARCHAR(3)
	DECLARE @Orig_candidate_sponsor1 VARCHAR(20)
	DECLARE @Orig_candidate_sponsor2 VARCHAR(100)
	DECLARE @Orig_candidate_sponsor2contact VARCHAR(100)
	DECLARE @Orig_candidate_transfer_reason VARCHAR(1000)
	DECLARE @Orig_candidate_remarks VARCHAR(1000)
	DECLARE @Orig_candidate_cariu VARCHAR(20)
	DECLARE @Orig_candidate_ministry XML
	DECLARE @Orig_candidate_DeceasedDate VARCHAR(15)
	DECLARE @Orig_candidate_MemberDate VARCHAR(15)
	DECLARE @Orig_family XML
	DECLARE @Orig_child XML
	
	DECLARE @Orig_baptism_by_others VARCHAR(100),
	@Orig_confirm_by_others VARCHAR(100),
	@Orig_baptism_church_others VARCHAR(100),
	@Orig_confirm_church_others VARCHAR(100),
	@Orig_previous_church_others VARCHAR(100),
	@Orig_transferTo VARCHAR(100),
	@Orig_transferToDate VARCHAR(15)

	DECLARE @FileAdded TABLE ([filename] VARCHAR(200),
								[GUID] VARCHAR(50),
								FileType VARCHAR(100),
								Fileremarks VARCHAR(1000))

	DECLARE @ChangesTable TABLE (
			ElementName VARCHAR(100),
			[From] VARCHAR(MAX),
			[To] VARCHAR(MAX));
	
	DECLARE @FamilyTable TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	DECLARE @OriginalFamilyTable TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
								
	DECLARE @FamilyAdded TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	DECLARE @FamilyRemoved TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	
	DECLARE @ChildTable TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @OriginalChildTable TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @ChildAdded TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @ChildRemoved TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	
	DECLARE @MinistryTable TABLE (MinistryID VARCHAR(100),
								  MinistryName VARCHAR(100))
	DECLARE @OriginalMinistryTable TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))
	DECLARE @MinistryTableAdded TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))
    DECLARE @MinistryTableRemoved TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))										  
																																

	SELECT  @Orig_candidate_salutation = Salutation, @Orig_candidate_photo = ICPhoto, @Orig_candidate_english_name = EnglishName, @Orig_candidate_unit = AddressUnit,
			@Orig_candidate_blk_house = AddressHouseBlk, @Orig_candidate_nationality = Nationality, @Orig_candidate_dialect = Dialect, @Orig_candidate_occupation = Occupation, @Orig_baptized_by = BaptismBy, @Orig_baptism_church = BaptismChurch,
			@Orig_confirmation_by = ConfirmBy, @Orig_confirmation_church = ConfirmChurch, @Orig_previous_church_membership = PreviousChurch, @Orig_candidate_chinses_name = ChineseName,
			@Orig_candidate_dob = DOB, @Orig_candidate_gender = Gender, @Orig_candidate_marital_status = MaritalStatus, @Orig_candidate_street_address = AddressStreet,
			@Orig_candidate_postal_code = AddressPostalCode, @Orig_candidate_email = Email, @Orig_candidate_education = Education, @Orig_candidate_language = [Language],
			@Orig_candidate_home_tel = HomeTel, @Orig_candidate_mobile_tel = MobileTel, @Orig_candidate_baptism_date = CONVERT(VARCHAR(15), BaptismDate,103), @Orig_candidate_confirmation_date = CONVERT(VARCHAR(15), ConfirmDate, 103),
			@Orig_candidate_marriage_date = CONVERT(VARCHAR(15),MarriageDate, 103), @Orig_family = Family, @Orig_child = Child, @Orig_candidate_congregation = Congregation, @Orig_candidate_sponsor1 = Sponsor1, @Orig_candidate_sponsor2 = Sponsor2, @Orig_candidate_sponsor2contact = Sponsor2Contact,
			@Orig_candidate_ministry = MinistryInvolvement, @Orig_candidate_DeceasedDate = CONVERT(VARCHAR(15), DeceasedDate, 103), @Orig_candidate_electoralroll = CONVERT(VARCHAR(15), ElectoralRoll, 103),
			@Orig_candidate_cariu = CarIU, @Orig_candidate_remarks = B.Remarks, @Orig_candidate_transfer_reason = TransferReason, @Orig_candidate_cellgroup = CellGroup, @Orig_candidate_MemberDate = CONVERT(VARCHAR(15), MemberDate, 103),
			@Orig_baptism_by_others = BaptismByOthers,
			@Orig_confirm_by_others = ConfirmByOthers,
			@Orig_baptism_church_others = BaptismChurchOthers,
			@Orig_confirm_church_others = ConfirmChurchOthers,
			@Orig_previous_church_others = PreviousChurchOthers,
			@Orig_transferTo = B.TransferTo,
			@Orig_transferToDate = CONVERT(VARCHAR(15),B.TransferToDate, 103)
	FROM dbo.tb_members AS A
	INNER JOIN dbo.tb_membersOtherInfo AS B ON B.NRIC = A.NRIC
	WHERE A.NRIC = @candidate_original_nric

	IF(LEN(@Filename) > 0)
	BEGIN
		INSERT INTO @FileAdded ([filename], [GUID], FileType, Fileremarks)
		SELECT @Filename, @GUID, @Filetype, @Fileremarks;
		
		INSERT INTO dbo.tb_members_attachments([DATE], NRIC, [GUID], [Filename], FileType, Remarks)
		SELECT GETDATE(), @candidate_nric, @GUID, @Filename, @Filetype, @Fileremarks;
	END

	IF(@candidate_original_nric <> @candidate_nric)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('NRIC', @candidate_original_nric, @candidate_nric);		
		UPDATE dbo.tb_DOSLogging SET Reference = @candidate_nric WHERE Reference = @candidate_original_nric
	END
	
	IF(@Orig_candidate_salutation <> @candidate_salutation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Salutation', (SELECT SalutationName FROM dbo.tb_Salutation WHERE SalutationID = @Orig_candidate_salutation), (SELECT SalutationName FROM dbo.tb_Salutation WHERE SalutationID = @candidate_salutation));		
	END

	IF(@Orig_candidate_english_name <> @candidate_english_name)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('English Name', @Orig_candidate_english_name, @candidate_english_name);
	END

	IF(@Orig_candidate_chinses_name <> @candidate_chinses_name)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Chinese Name', @Orig_candidate_chinses_name, @candidate_chinses_name);
	END

	IF(@Orig_candidate_photo <> @candidate_photo)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('ICPhoto', @Orig_candidate_photo, @candidate_photo);
	END

	IF(@Orig_candidate_unit <> @candidate_unit)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Unit', @Orig_candidate_unit, @candidate_unit);
	END

	IF(@Orig_candidate_blk_house <> @candidate_blk_house)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address BLK/House', @Orig_candidate_blk_house, @candidate_blk_house);
	END

	IF(@Orig_candidate_street_address <> @candidate_street_address)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Street', @Orig_candidate_street_address, @candidate_street_address);
	END

	IF(@Orig_candidate_postal_code <> @candidate_postal_code)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Postal Code', @Orig_candidate_postal_code, @candidate_postal_code);
	END
	
	IF(@Orig_candidate_transfer_reason <> @candidate_transfer_reason)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer Reason', @Orig_candidate_transfer_reason, @candidate_transfer_reason);
	END

	IF(@Orig_candidate_nationality <> @candidate_nationality)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Nationality', (SELECT CountryName FROM dbo.tb_country WHERE CountryID = @Orig_candidate_nationality), (SELECT CountryName FROM dbo.tb_country WHERE CountryID = @candidate_nationality);
	END

	IF(@Orig_candidate_dialect <> @candidate_dialect)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Dialect', ISNULL((SELECT DialectName FROM dbo.tb_dialect WHERE DialectID = @Orig_candidate_dialect), ''), ISNULL((SELECT DialectName FROM dbo.tb_dialect WHERE DialectID = @candidate_dialect), ''));
	END

	IF(@Orig_candidate_occupation <> @candidate_occupation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Occupation', (SELECT OccupationName FROM dbo.tb_occupation WHERE OccupationID = @Orig_candidate_occupation), (SELECT OccupationName FROM dbo.tb_occupation WHERE OccupationID = @candidate_occupation);
	END

	IF(@Orig_baptized_by <> @baptized_by)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Baptised By', ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @Orig_baptized_by),''), ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @baptized_by),'');
	END

	IF(@Orig_baptism_church <> @baptism_church)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Baptism Church', (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_baptism_church), (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @baptism_church);
	END

	IF(ISNULL(@Orig_candidate_baptism_date,'') <> ISNULL(@candidate_baptism_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism Date', ISNULL(@Orig_candidate_baptism_date,''), ISNULL(@candidate_baptism_date,''));
	END

	IF(@Orig_confirmation_by <> @confirmation_by)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Confirmation By', ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @Orig_confirmation_by),''), ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @confirmation_by),'');
	END

	IF(@Orig_confirmation_church <> @confirmation_church)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Conformation Church', (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_confirmation_church), (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @confirmation_church);
	END

	IF(ISNULL(@Orig_candidate_confirmation_date,'') <> ISNULL(@candidate_confirmation_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Conformation Date', ISNULL(@Orig_candidate_confirmation_date,''), ISNULL(@candidate_confirmation_date,''));
	END

	IF(@Orig_previous_church_membership <> @previous_church_membership)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Previous Church Membership', ISNULL((SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_previous_church_membership),''), ISNULL((SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @previous_church_membership),''));		
	END

	IF(@Orig_candidate_dob <> @candidate_dob)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Date Of Birth', @Orig_candidate_dob, @candidate_dob);
	END

	IF(@Orig_candidate_gender <> @candidate_gender)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Gender', @Orig_candidate_gender, @candidate_gender);
	END

	IF(@Orig_candidate_marital_status <> @candidate_marital_status)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Marital Status', (SELECT MaritalStatusName FROM dbo.tb_maritalstatus WHERE MaritalStatusID = @Orig_candidate_marital_status), (SELECT MaritalStatusName FROM dbo.tb_maritalstatus WHERE MaritalStatusID = @candidate_marital_status);
	END

	IF(ISNULL(@Orig_candidate_marriage_date,'') <> ISNULL(@candidate_marriage_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Marriage Date', ISNULL(@Orig_candidate_marriage_date,''), ISNULL(@candidate_marriage_date,''));
	END

	IF(@Orig_candidate_email <> @candidate_email)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Email', @Orig_candidate_email, @candidate_email);
	END

	IF(@Orig_candidate_education <> @candidate_education)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Education', (SELECT EducationName FROM dbo.tb_education WHERE EducationID = @Orig_candidate_education), (SELECT EducationName FROM dbo.tb_education WHERE EducationID = @candidate_education));		
	END

	IF(@Orig_candidate_language <> @candidate_language)
	BEGIN
		DECLARE @oldLang VARCHAR(1000) = '';
		DECLARE @newLang VARCHAR(1000) = '';
		
		SELECT @oldLang = @oldLang + A.LanguageName + ', ' FROM dbo.udf_Split(@Orig_candidate_language, ',')
		LEFT OUTER JOIN dbo.tb_language AS A ON A.LanguageID = items;
		
		SELECT @newLang = @newLang + A.LanguageName + ', ' FROM dbo.udf_Split(@candidate_language, ',')
		LEFT OUTER JOIN dbo.tb_language AS A ON A.LanguageID = items;
	
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Language', @oldLang, @newLang);
	END

	IF(@Orig_candidate_home_tel <> @candidate_home_tel)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Home Tel', @Orig_candidate_home_tel, @candidate_home_tel);
	END

	IF(@Orig_candidate_mobile_tel <> @candidate_mobile_tel)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Mobile Tel', @Orig_candidate_mobile_tel, @candidate_mobile_tel);
	END

	IF(@Orig_candidate_congregation <> @candidate_congregation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Congregation', (SELECT CongregationName FROM dbo.tb_congregation WHERE CongregationID = @Orig_candidate_congregation), (SELECT CongregationName FROM dbo.tb_congregation WHERE CongregationID = @candidate_congregation);
	END

	IF(@Orig_candidate_sponsor1 <> @candidate_sponsor1)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Sponsor 1', ISNULL((SELECT dbo.udf_getStafforMemberName(@Orig_candidate_sponsor1)),''), ISNULL((SELECT dbo.udf_getStafforMemberName(@candidate_sponsor1)),'');
	END

	IF(@Orig_candidate_sponsor2 <> @candidate_sponsor2)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Sponsor 2', @Orig_candidate_sponsor2, @candidate_sponsor2);
	END
	
	IF(@Orig_candidate_sponsor2contact <> @candidate_sponsor2contact)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Sponsor 2 Contact', @Orig_candidate_sponsor2contact, @candidate_sponsor2contact);
	END

	IF(ISNULL(@Orig_candidate_DeceasedDate,'') <> ISNULL(@candidate_DeceasedDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Deceased Date', ISNULL(@Orig_candidate_DeceasedDate,''), ISNULL(@candidate_DeceasedDate,''));
	END
	
	IF(ISNULL(@Orig_candidate_MemberDate,'') <> ISNULL(@candidate_MemberDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Church Member as of', ISNULL(@Orig_candidate_MemberDate,''), ISNULL(@candidate_MemberDate,''));
	END
	
	IF(ISNULL(@Orig_candidate_electoralroll,'') <> ISNULL(@candidate_electoralroll,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Electoral Roll Date', ISNULL(@Orig_candidate_electoralroll,''), ISNULL(@candidate_electoralroll,''));
	END
	
	IF(@Orig_candidate_remarks <> @candidate_remarks)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Remarks', @Orig_candidate_remarks, @candidate_remarks);
	END
	
	IF(@Orig_candidate_cariu <> @candidate_cariu)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Car IU', @Orig_candidate_cariu, @candidate_cariu);
	END
	
	IF(@Orig_candidate_cellgroup <> @candidate_cellgroup)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Cellgroup', ISNULL((SELECT CellgroupName FROM dbo.tb_cellgroup WHERE CellgroupID = @Orig_candidate_cellgroup),''), ISNULL((SELECT CellgroupName FROM dbo.tb_cellgroup WHERE CellgroupID = @candidate_cellgroup),'');
	END
	
	IF(@Orig_baptism_by_others <> @baptism_by_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism By Others', @Orig_baptism_by_others, @baptism_by_others);
	END
	IF(@Orig_confirm_by_others <> @confirm_by_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Confirm By Others', @Orig_confirm_by_others, @confirm_by_others);
	END
	IF(@Orig_baptism_church_others <> @baptism_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism Church By Others', @Orig_baptism_church_others, @baptism_church_others);
	END
	IF(@Orig_confirm_church_others <> @confirm_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Confirm Church By Others', @Orig_confirm_church_others, @confirm_church_others);
	END
	IF(@Orig_previous_church_others <> @previous_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism By Others', @Orig_previous_church_others, @previous_church_others);
	END
	
	IF(ISNULL(@Orig_transferTo,'') <> ISNULL(@transferTo,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer To', ISNULL(@Orig_transferTo,''), ISNULL(@transferTo,''));
	END
	
	IF(ISNULL(@Orig_transferToDate,'') <> ISNULL(@transferToDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer To Date', ISNULL(@Orig_transferToDate,''), ISNULL(@transferToDate,''));
	END
	
	---------------------------
	
	DECLARE @xdoc int;
	DECLARE @familyxml AS XML = (SELECT Family FROM dbo.tb_members WHERE NRIC = @candidate_original_nric);
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @familyxml;

	INSERT INTO @OriginalFamilyTable (FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion) 
	Select FamilyReligion, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion
	from OpenXml(@xdoc, '/FamilyList/*')
	with (
	FamilyType VARCHAR(100) './FamilyType',
	FamilyEnglishName VARCHAR(100) './FamilyEnglishName',
	FamilyChineseName VARCHAR(100) './FamilyChineseName',
	FamilyOccupation VARCHAR(100) './FamilyOccupation',
	FamilyReligion VARCHAR(50) './FamilyReligion');
	
	SET @familyxml = @family;
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @familyxml;
	
	INSERT INTO @FamilyTable (FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion) 
	Select FamilyReligion, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion
	from OpenXml(@xdoc, '/FamilyList/*')
	with (
	FamilyType VARCHAR(100) './FamilyType',
	FamilyEnglishName VARCHAR(100) './FamilyEnglishName',
	FamilyChineseName VARCHAR(100) './FamilyChineseName',
	FamilyOccupation VARCHAR(100) './FamilyOccupation',
	FamilyReligion VARCHAR(50) './FamilyReligion');
	
	INSERT INTO @FamilyAdded
	SELECT * FROM @FamilyTable WHERE FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion NOT IN (SELECT FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion FROM @OriginalFamilyTable)
	
	INSERT INTO @FamilyRemoved
	SELECT * FROM @OriginalFamilyTable WHERE FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion NOT IN (SELECT FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion FROM @FamilyTable)	
	
	-------------------------
	
	
	DECLARE @chilexml AS XML = (SELECT Child FROM dbo.tb_members WHERE NRIC = @candidate_original_nric);
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @chilexml;

	INSERT INTO @OriginalChildTable (ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch) 
	Select ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch
	from OpenXml(@xdoc, '/ChildList/*')
	with (
	ChildEnglishName VARCHAR(100) './ChildEnglishName',
	ChildChineseName VARCHAR(100) './ChildChineseName',
	ChildBaptismDate VARCHAR(100) './ChildBaptismDate',
	ChildBaptismBy VARCHAR(100) './ChildBaptismBy',
	ChildChurch VARCHAR(50) './ChildChurch');
	
	SET @chilexml = @child;
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @chilexml;
	
	INSERT INTO @ChildTable (ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch) 
	Select ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch
	from OpenXml(@xdoc, '/ChildList/*')
	with (
	ChildEnglishName VARCHAR(100) './ChildEnglishName',
	ChildChineseName VARCHAR(100) './ChildChineseName',
	ChildBaptismDate VARCHAR(100) './ChildBaptismDate',
	ChildBaptismBy VARCHAR(100) './ChildBaptismBy',
	ChildChurch VARCHAR(50) './ChildChurch');
	
	INSERT INTO @ChildAdded
	SELECT * FROM @ChildTable WHERE ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch
	NOT IN (SELECT ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch
	FROM @OriginalChildTable)
	
	INSERT INTO @ChildRemoved
	SELECT * FROM @OriginalChildTable WHERE ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch
	NOT IN (SELECT ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch
	FROM @ChildTable)	

	--------------
	
	
	DECLARE @ministryxml AS VARCHAR(MAX) = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(MAX),(SELECT MinistryInvolvement FROM dbo.tb_membersOtherInfo WHERE NRIC = @candidate_original_nric)), '<Ministry>', ''), '</Ministry>', ''), '</MinistryID><MinistryID>', ','), '</MinistryID>', ''), '<MinistryID>', ''), '<Ministry/>', '');

	INSERT INTO @OriginalMinistryTable (MinistryID, MinistryName) 
	SELECT ITEMS, MinistryName FROM dbo.udf_Split(@ministryxml, ',')
	INNER JOIN dbo.tb_ministry ON MinistryID = ITEMS
	
	SET @ministryxml = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(MAX),@candidate_ministry), '<Ministry>', ''), '</Ministry>', ''), '</MinistryID><MinistryID>', ','), '</MinistryID>', ''), '<MinistryID>', ''), '<Ministry/>', '');
	
	INSERT INTO @MinistryTable (MinistryID, MinistryName) 
	SELECT ITEMS, MinistryName FROM dbo.udf_Split(@ministryxml, ',')
	INNER JOIN dbo.tb_ministry ON MinistryID = ITEMS
	
	INSERT INTO @MinistryTableAdded
	SELECT * FROM @MinistryTable WHERE MinistryID NOT IN (SELECT MinistryID FROM @OriginalMinistryTable)
	
	INSERT INTO @MinistryTableRemoved
	SELECT * FROM @OriginalMinistryTable WHERE MinistryID NOT IN (SELECT MinistryID FROM @MinistryTable)	
	
	--------------
	
	
	
	DECLARE @returnTable TABLE (
		FromTo XML,
		FamilyRemoved XML,
		FamilyAdded XML,
		ChildRemoved XML,
		ChileAdded XML,
		MinistryAdded XML,
		MinistryRemoved XML,
		FileAdded XML);
	
	IF EXISTS (SELECT 1 FROM @ChangesTable)
	OR EXISTS (SELECT 1 FROM @FamilyRemoved)
	OR EXISTS (SELECT 1 FROM @FamilyAdded)
	OR EXISTS (SELECT 1 FROM @ChildAdded)
	OR EXISTS (SELECT 1 FROM @ChildRemoved)
	OR EXISTS (SELECT 1 FROM @MinistryTableAdded)
	OR EXISTS (SELECT 1 FROM @MinistryTableRemoved)
	OR EXISTS (SELECT 1 FROM @FileAdded)
	BEGIN
		INSERT INTO @returnTable (FromTo, FamilyRemoved, FamilyAdded, MinistryRemoved, MinistryAdded, ChildRemoved, ChileAdded, FileAdded)
		SELECT (SELECT ElementName, [From], [To] FROM @ChangesTable FOR XML RAW('Changes'), ELEMENTS),
		(SELECT (SELECT FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion FROM @FamilyRemoved FOR XML RAW('Family'), ELEMENTS)),
		(SELECT (SELECT FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion FROM @FamilyAdded FOR XML RAW('Family'), ELEMENTS)),
		(SELECT (SELECT MinistryName FROM @MinistryTableRemoved FOR XML RAW('Ministry'), ELEMENTS)),
		(SELECT (SELECT MinistryName FROM @MinistryTableAdded FOR XML RAW('Ministry'), ELEMENTS)),
		(SELECT (SELECT ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch FROM @ChildRemoved FOR XML RAW('Child'), ELEMENTS)),
		(SELECT (SELECT ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch FROM @ChildAdded FOR XML RAW('Child'), ELEMENTS)),
		(SELECT (SELECT [filename], [GUID], FileType, Fileremarks FROM @FileAdded FOR XML RAW('AttachmentAdded'), ELEMENTS));
		
		DECLARE @changesXML AS XML = (
		SELECT FromTo, FamilyRemoved, FamilyAdded, ChildRemoved, ChileAdded, MinistryRemoved, MinistryAdded, FileAdded FROM @returnTable FOR XML RAW('Changes'), ELEMENTS);
		
		
		
		UPDATE tb_members SET   Salutation = @candidate_salutation,
							NRIC = @candidate_nric,
							ICPhoto = @candidate_photo,
							EnglishName = @candidate_english_name,
							AddressUnit = @candidate_unit,
							AddressHouseBlk = @candidate_blk_house,
							Nationality = @candidate_nationality,
							Dialect = @candidate_dialect,
							Occupation = @candidate_occupation,
							BaptismBy = @baptized_by,
							BaptismChurch = @baptism_church,
							ConfirmBy = @confirmation_by,
							ConfirmChurch = @confirmation_church,
							PreviousChurch = @previous_church_membership,
							ChineseName = @candidate_chinses_name,
							DOB = @candidate_dob,
							Gender = @candidate_gender,
							MaritalStatus = @candidate_marital_status,
							AddressStreet = @candidate_street_address,
							AddressPostalCode = @candidate_postal_code,
							Email = @candidate_email,
							Education = @candidate_education,
							[Language] = @candidate_language,
							HomeTel = @candidate_home_tel,
							MobileTel = @candidate_mobile_tel,
							TransferReason = @candidate_transfer_reason,
							CarIU = @candidate_cariu,
							BaptismDate = CONVERT(DATETIME, @candidate_baptism_date, 103),
							ConfirmDate = CONVERT(DATETIME, @candidate_confirmation_date, 103),
							MarriageDate = CONVERT(DATETIME, @candidate_marriage_date, 103),
							CurrentParish = @CurrentParish,
							DeceasedDate = CONVERT(DATETIME, @candidate_DeceasedDate, 103),
							Family = @family,
							Child = @child,
							BaptismByOthers = @baptism_by_others,
							ConfirmByOthers = @confirm_by_others,
							BaptismChurchOthers = @baptism_church_others,
							ConfirmChurchOthers = @confirm_church_others,
							PreviousChurchOthers = @previous_church_others
		WHERE NRIC = @candidate_original_nric
			
		UPDATE dbo.tb_membersOtherInfo SET Congregation = @candidate_congregation,
									   NRIC = @candidate_nric,
									   ElectoralRoll = CONVERT(DATETIME, @candidate_electoralroll, 103),
									   CellGroup = @candidate_cellgroup,
									   MinistryInvolvement = @candidate_ministry,
									   Sponsor1 = @candidate_sponsor1,
									   Sponsor2 = @candidate_sponsor2,
									   Sponsor2Contact = @candidate_sponsor2contact,
									   Remarks = @candidate_remarks,
									   TransferTo = @transferTo,
									   TransferToDate = CONVERT(DATETIME, @transferToDate, 103),
									   MemberDate = CONVERT(DATETIME, @candidate_MemberDate, 103)
		WHERE NRIC = @candidate_original_nric
		
		SELECT 'Updated' AS Result;
		
		EXEC dbo.usp_insertlogging 'I', @UserID, 'Membership', 'Update', 1, 'NRIC', @candidate_nric, @changesXML;
	END
	ELSE
	BEGIN
		SELECT 'NoChange' AS Result;
	END
END
ELSE
BEGIN		
	SELECT 'NotFound' AS Result
END

SET NOCOUNT OFF;

GO

---$ Alter Procedure dbo.usp_updateTempMember 
IF OBJECT_ID(N'dbo.usp_updateTempMember') IS NULL
BEGIN
    PRINT 'Create procedure : dbo.usp_updateTempMember'
    EXECUTE('CREATE PROCEDURE dbo.usp_updateTempMember AS RETURN 0') 
END
GO

PRINT 'Alter procedure : dbo.usp_updateTempMember'
GO

ALTER PROCEDURE [dbo].[usp_updateTempMember]
(@updateXML XML)
AS
SET NOCOUNT ON;


DECLARE @UserID VARCHAR(50),
@candidate_original_nric VARCHAR(20),
@candidate_salutation VARCHAR(4),
@candidate_photo VARCHAR(1000),
@candidate_english_name VARCHAR(50),
@candidate_unit VARCHAR(10),
@candidate_blk_house VARCHAR(10),
@candidate_nationality VARCHAR(4),
@candidate_dialect VARCHAR(4),
@candidate_occupation VARCHAR(4),
@baptized_by VARCHAR(50),
@baptism_church VARCHAR(4),
@confirmation_by VARCHAR(50),
@confirmation_church VARCHAR(4),
@previous_church_membership VARCHAR(4),
@candidate_chinses_name NVARCHAR(50),
@candidate_nric VARCHAR(20),
@candidate_dob DATETIME,
@candidate_gender VARCHAR(1),
@candidate_marital_status VARCHAR(3),
@candidate_street_address VARCHAR(1000),
@candidate_postal_code INT,
@candidate_email VARCHAR(100),
@candidate_education VARCHAR(3),
@candidate_language VARCHAR(200),
@candidate_home_tel VARCHAR(15),
@candidate_mobile_tel VARCHAR(15),
@candidate_baptism_date VARCHAR(15),
@candidate_confirmation_date VARCHAR(15),
@candidate_marriage_date VARCHAR(15),
@candidate_congregation VARCHAR(3),
@candidate_electoralroll VARCHAR(15),
@candidate_cellgroup VARCHAR(3),
@candidate_sponsor1 VARCHAR(10),
@candidate_sponsor2 VARCHAR(100),
@candidate_sponsor2contact VARCHAR(100),
@candidate_transfer_reason VARCHAR(1000),
@candidate_ministry XML,
@candidate_DeceasedDate VARCHAR(15),
@candidate_MemberDate VARCHAR(15),
@candidate_cariu VARCHAR(20),
@candidate_remarks VARCHAR(1000),
@family XML,
@child XML,
@baptism_by_others VARCHAR(100),
@confirm_by_others VARCHAR(100),
@baptism_church_others VARCHAR(100),
@confirm_church_others VARCHAR(100),
@previous_church_others VARCHAR(100),
@transferTo VARCHAR(100),
@transferToDate VARCHAR(15),
@Filename VARCHAR(200),
@GUID VARCHAR(50),
@Filetype VARCHAR(3),
@Fileremarks VARCHAR(1000)

	DECLARE @idoc int;
	EXEC sp_xml_preparedocument @idoc OUTPUT, @updateXML;
	
    SELECT @UserID = EnteredBy, @candidate_original_nric = OriginalNric, @candidate_nric = NRIC, @candidate_salutation = Salutation,
	@candidate_english_name = EnglishName, @candidate_chinses_name = ChineseName, @candidate_gender = Gender, @candidate_dob = CONVERT(DATETIME, DOB, 103),
	@candidate_marital_status = MaritalStatus, @candidate_marriage_date = MarriageDate, @candidate_nationality = Nationality,
	@candidate_dialect = Dialect, @candidate_photo = Photo, @candidate_street_address = AddressStreetName, @candidate_blk_house = AddressBlkHouse,
	@candidate_postal_code = AddressPostalCode, @candidate_unit = AddressUnit, @candidate_home_tel = HomeTel, @candidate_mobile_tel = MobileTel,
	@candidate_email = Email, @candidate_education = Education, @candidate_language = [Language], @candidate_occupation = Occupation,
	@baptized_by = BaptismBy, @candidate_baptism_date = BaptismDate, @baptism_church = BaptismChurch, @confirmation_by = ConfirmationBy,
	@confirmation_church = ConfirmationChurch, @candidate_confirmation_date = ConfirmationDate, @previous_church_membership = PreviousChurchMembership,
	@family = FamilyXML, @child = ChildXML, @candidate_sponsor1 = Sponsor1, @candidate_sponsor2 = Sponsor2, @candidate_sponsor2contact = Sponsor2Contact, @candidate_electoralroll = ElectoralRoll,
	@candidate_remarks = Remarks, @candidate_cariu = CarIU, @candidate_transfer_reason = TransferReason, @candidate_cellgroup = Cellgroup, @candidate_ministry = MinistryInvolvement, @candidate_DeceasedDate = DeceasedDate, @candidate_MemberDate = MemberDate, @candidate_congregation = Congregation,
	@baptism_by_others = BaptismByOthers, @confirm_by_others = ConfirmByOthers, @baptism_church_others = BaptismChurchOthers, @confirm_church_others = ConfirmChurchOthers, @previous_church_others = PreviousChurchOthers,
	@transferTo = TransferTo, @transferToDate = TransferToDate,
	@Filename = [Filename], @GUID = [GUID], @Filetype = Filetype, @Fileremarks = Fileremarks
	FROM OPENXML(@idoc, '/Update')
	WITH (
	[Filename] VARCHAR(200)'./Filename',
	[GUID] VARCHAR(50)'./GUID',
	Filetype VARCHAR(3)'./Filetype',
	Fileremarks VARCHAR(1000)'./FileRemarks',
	EnteredBy VARCHAR(50)'./EnteredBy',
	OriginalNric VARCHAR(20)'./OriginalNRIC',
	NRIC VARCHAR(20)'./NRIC',
	Salutation VARCHAR(3) './Salutation',
	EnglishName VARCHAR(50) './EnglishName',
	ChineseName NVARCHAR(50) './ChineseName',
	Gender VARCHAR(1) './Gender',
	DOB VARCHAR(10) './DOB',
	MaritalStatus VARCHAR(3) './MaritalStatus',
	MarriageDate VARCHAR(20) './MarriageDate',
	Nationality VARCHAR(3) './Nationality',
	Dialect VARCHAR(3) './Dialect',
	Photo VARCHAR(1000) './Photo',
	AddressStreetName VARCHAR(100) './AddressStreetName',
	AddressPostalCode INT './AddressPostalCode',
	AddressBlkHouse VARCHAR(10) './AddressBlkHouse',
	AddressUnit VARCHAR(10) './AddressUnit',
	HomeTel VARCHAR(15) './HomeTel',
	MobileTel VARCHAR(15) './MobileTel',
	Email VARCHAR(100) './Email',
	Education VARCHAR(3) './Education',
	[Language] VARCHAR(200) './Language',
	Occupation VARCHAR(3) './Occupation',
	Congregation VARCHAR(3) './Congregation',
	BaptismBy VARCHAR(20) './BaptismBy',
	BaptismDate VARCHAR(10) './BaptismDate',
	BaptismChurch VARCHAR(3) './BaptismChurch',
	ConfirmationBy VARCHAR(20) './ConfirmationBy',
	ConfirmationChurch VARCHAR(3) './ConfirmationChurch',
	ConfirmationDate VARCHAR(10) './ConfirmationDate',
	TransferReason VARCHAR(10) './TransferReason',
	PreviousChurchMembership VARCHAR(3) './PreviousChurchMembership',
	CarIU VARCHAR(20) './CarIU',
	Remarks VARCHAR(1000) './Remarks',
	FamilyXML XML './FamilyXML/FamilyList',
	ChildXML XML './ChildXML/ChildList',
	Sponsor1 VARCHAR(20) './Sponsor1',
	Sponsor2 VARCHAR(100) './Sponsor2',
	Sponsor2Contact VARCHAR(100) './Sponsor2Contact',
	ElectoralRoll VARCHAR(10) './ElectoralRoll',
	Cellgroup VARCHAR(3) './Cellgroup',
	MinistryInvolvement XML './MinistryInvolvement/Ministry',
	MemberDate VARCHAR(10) './MemberDate',
	DeceasedDate VARCHAR(10) './DeceasedDate',
	BaptismByOthers VARCHAR(100) './BaptismByOthers',
	BaptismChurchOthers VARCHAR(100) './BaptismChurchOthers',
	ConfirmByOthers VARCHAR(100) './ConfirmByOthers',
	ConfirmChurchOthers VARCHAR(100) './ConfirmChurchOthers',
	PreviousChurchOthers VARCHAR(100) './PreviousChurchOthers',
	TransferTo VARCHAR(100) './TransferTo',
	TransferToDate VARCHAR(100) './TransferToDate');

DECLARE @rowcount INT
SET @rowcount = 0

IF(LEN(@candidate_cellgroup) = 0)
BEGIN
	SET @candidate_cellgroup = '0'
END

IF(LEN(@candidate_dialect) = 0)
BEGIN
	SET @candidate_dialect = '0'
END

IF(LEN(@previous_church_membership) = 0)
BEGIN
	SET @previous_church_membership = '0'
END

IF(LEN(@baptism_church) = 0)
BEGIN
	SET @baptism_church = '0'
END

IF(LEN(@confirmation_church) = 0)
BEGIN
	SET @confirmation_church = '0'
END

IF(LEN(@TransferToDate) = 0)
BEGIN
	SET @TransferToDate = NULL;
END

IF(LEN(@candidate_MemberDate) = 0)
BEGIN
	SET @candidate_MemberDate = NULL;
END

IF(LEN(@candidate_DeceasedDate) = 0)
BEGIN
	SET @candidate_DeceasedDate = NULL;
END

IF(LEN(@candidate_electoralroll) = 0)
BEGIN
	SET @candidate_electoralroll = NULL;
END

IF(LEN(@candidate_baptism_date) = 0)
BEGIN
	SET @candidate_baptism_date = NULL;
END

IF(LEN(@candidate_marriage_date) = 0)
BEGIN
	SET @candidate_marriage_date = NULL;
END

if(LEN(@candidate_confirmation_date) = 0)
BEGIN
	SET @candidate_confirmation_date = NULL;
END

IF EXISTS( SELECT 1 FROM dbo.tb_members_temp WHERE NRIC = @candidate_original_nric)
BEGIN

	DECLARE @CurrentParish TINYINT
	SELECT @CurrentParish = CONVERT(TINYINT,value) FROM dbo.tb_App_Config WHERE ConfigName = 'currentparish'

	DECLARE @Orig_candidate_salutation VARCHAR(4)
	DECLARE @Orig_candidate_photo VARCHAR(1000)
	DECLARE @Orig_candidate_english_name VARCHAR(50)
	DECLARE @Orig_candidate_unit VARCHAR(10)
	DECLARE @Orig_candidate_blk_house VARCHAR(10)
	DECLARE @Orig_candidate_nationality VARCHAR(4)
	DECLARE @Orig_candidate_dialect VARCHAR(4)
	DECLARE @Orig_candidate_occupation VARCHAR(4)
	DECLARE @Orig_baptized_by VARCHAR(50)
	DECLARE @Orig_baptism_church VARCHAR(4)
	DECLARE @Orig_confirmation_by VARCHAR(50)
	DECLARE @Orig_confirmation_church VARCHAR(4)
	DECLARE @Orig_previous_church_membership VARCHAR(4)
	DECLARE @Orig_candidate_chinses_name NVARCHAR(50)
	DECLARE @Orig_candidate_nric VARCHAR(10)
	DECLARE @Orig_candidate_dob DATETIME
	DECLARE @Orig_candidate_gender VARCHAR(1)
	DECLARE @Orig_candidate_marital_status VARCHAR(3)
	DECLARE @Orig_candidate_street_address VARCHAR(1000)
	DECLARE @Orig_candidate_postal_code INT
	DECLARE @Orig_candidate_email VARCHAR(100)
	DECLARE @Orig_candidate_education VARCHAR(3)
	DECLARE @Orig_candidate_language VARCHAR(200)
	DECLARE @Orig_candidate_home_tel VARCHAR(15)
	DECLARE @Orig_candidate_mobile_tel VARCHAR(15)
	DECLARE @Orig_candidate_baptism_date VARCHAR(15)
	DECLARE @Orig_candidate_confirmation_date VARCHAR(15)
	DECLARE @Orig_candidate_marriage_date VARCHAR(15)
	DECLARE @Orig_candidate_congregation VARCHAR(3)
	DECLARE @Orig_candidate_electoralroll VARCHAR(15)
	DECLARE @Orig_candidate_cellgroup VARCHAR(3)
	DECLARE @Orig_candidate_sponsor1 VARCHAR(20)
	DECLARE @Orig_candidate_sponsor2 VARCHAR(100)
	DECLARE @Orig_candidate_sponsor2contact VARCHAR(100)
	DECLARE @Orig_candidate_transfer_reason VARCHAR(1000)
	DECLARE @Orig_candidate_ministry XML
	DECLARE @Orig_candidate_DeceasedDate VARCHAR(15)
	DECLARE @Orig_candidate_MemberDate VARCHAR(15)
	DECLARE @Orig_candidate_remarks VARCHAR(1000)
	DECLARE @Orig_candidate_cariu VARCHAR(20)
	DECLARE @Orig_family XML
	DECLARE @Orig_child XML
	
	DECLARE @Orig_baptism_by_others VARCHAR(100),
	@Orig_confirm_by_others VARCHAR(100),
	@Orig_baptism_church_others VARCHAR(100),
	@Orig_confirm_church_others VARCHAR(100),
	@Orig_previous_church_others VARCHAR(100),
	@Orig_transferTo VARCHAR(100),
	@Orig_transferToDate VARCHAR(15)

	DECLARE @FileAdded TABLE ([filename] VARCHAR(200),
								[GUID] VARCHAR(50),
								FileType VARCHAR(100),
								Fileremarks VARCHAR(1000))

	DECLARE @ChangesTable TABLE (
			ElementName VARCHAR(100),
			[From] VARCHAR(MAX),
			[To] VARCHAR(MAX));
	
	DECLARE @FamilyTable TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	DECLARE @OriginalFamilyTable TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
								
	DECLARE @FamilyAdded TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	DECLARE @FamilyRemoved TABLE (FamilyType VARCHAR(100),
								FamilyEnglishName VARCHAR(100),
								FamilyChineseName VARCHAR(100),
								FamilyOccupation VARCHAR(100),
								FamilyReligion VARCHAR(100))
	
	DECLARE @ChildTable TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @OriginalChildTable TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @ChildAdded TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	DECLARE @ChildRemoved TABLE (ChildEnglishName VARCHAR(100),
								ChildChineseName VARCHAR(100),
								ChildBaptismDate VARCHAR(100),
								ChildBaptismBy VARCHAR(100),
								ChildChurch VARCHAR(100))
	
	DECLARE @MinistryTable TABLE (MinistryID VARCHAR(100),
								  MinistryName VARCHAR(100))
	DECLARE @OriginalMinistryTable TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))
	DECLARE @MinistryTableAdded TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))
    DECLARE @MinistryTableRemoved TABLE (MinistryID VARCHAR(100),
										  MinistryName VARCHAR(100))										  
																																

	SELECT  @Orig_candidate_salutation = Salutation, @Orig_candidate_photo = ICPhoto, @Orig_candidate_english_name = EnglishName, @Orig_candidate_unit = AddressUnit,
			@Orig_candidate_blk_house = AddressHouseBlk, @Orig_candidate_nationality = Nationality, @Orig_candidate_dialect = Dialect, @Orig_candidate_occupation = Occupation, @Orig_baptized_by = BaptismBy, @Orig_baptism_church = BaptismChurch,
			@Orig_confirmation_by = ConfirmBy, @Orig_confirmation_church = ConfirmChurch, @Orig_previous_church_membership = PreviousChurch, @Orig_candidate_chinses_name = ChineseName,
			@Orig_candidate_dob = DOB, @Orig_candidate_gender = Gender, @Orig_candidate_marital_status = MaritalStatus, @Orig_candidate_street_address = AddressStreet,
			@Orig_candidate_postal_code = AddressPostalCode, @Orig_candidate_email = Email, @Orig_candidate_education = Education, @Orig_candidate_language = [Language],
			@Orig_candidate_home_tel = HomeTel, @Orig_candidate_mobile_tel = MobileTel, @Orig_candidate_baptism_date = CONVERT(VARCHAR(15), BaptismDate,103), @Orig_candidate_confirmation_date = CONVERT(VARCHAR(15), ConfirmDate, 103),
			@Orig_candidate_marriage_date = CONVERT(VARCHAR(15),MarriageDate, 103), @Orig_family = Family, @Orig_child = Child, @Orig_candidate_congregation = Congregation, @Orig_candidate_sponsor1 = Sponsor1, @Orig_candidate_sponsor2 = Sponsor2, @Orig_candidate_sponsor2contact = Sponsor2Contact,
			@Orig_candidate_ministry = MinistryInvolvement, @Orig_candidate_DeceasedDate = CONVERT(VARCHAR(15), DeceasedDate, 103), @Orig_candidate_electoralroll = CONVERT(VARCHAR(15), ElectoralRoll, 103),
			@Orig_candidate_cariu = CarIU, @Orig_candidate_remarks = B.Remarks, @Orig_candidate_transfer_reason = TransferReason, @Orig_candidate_cellgroup = CellGroup, @Orig_candidate_MemberDate = CONVERT(VARCHAR(15), MemberDate, 103),
			@Orig_baptism_by_others = BaptismByOthers,
			@Orig_confirm_by_others = ConfirmByOthers,
			@Orig_baptism_church_others = BaptismChurchOthers,
			@Orig_confirm_church_others = ConfirmChurchOthers,
			@Orig_previous_church_others = PreviousChurchOthers,
			@Orig_transferTo = B.TransferTo,
			@Orig_transferToDate = CONVERT(VARCHAR(15),B.TransferToDate, 103)
	FROM dbo.tb_members_temp AS A
	INNER JOIN dbo.tb_membersOtherInfo_temp AS B ON B.NRIC = A.NRIC
	WHERE A.NRIC = @candidate_original_nric
	
	IF(LEN(@Filename) > 0)
	BEGIN
		INSERT INTO @FileAdded ([filename], [GUID], FileType, Fileremarks)
		SELECT @Filename, @GUID, @Filetype, @Fileremarks;
		
		INSERT INTO dbo.tb_members_attachments([DATE], NRIC, [GUID], [Filename], FileType, Remarks)
		SELECT GETDATE(), @candidate_nric, @GUID, @Filename, @Filetype, @Fileremarks;
	END
	
	IF(@candidate_original_nric <> @candidate_nric)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('NRIC', @candidate_original_nric, @candidate_nric);		
		UPDATE dbo.tb_DOSLogging SET Reference = @candidate_nric WHERE Reference = @candidate_original_nric
	END
	
	IF(@Orig_candidate_salutation <> @candidate_salutation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Salutation', (SELECT SalutationName FROM dbo.tb_Salutation WHERE SalutationID = @Orig_candidate_salutation), (SELECT SalutationName FROM dbo.tb_Salutation WHERE SalutationID = @candidate_salutation));		
	END

	IF(@Orig_candidate_english_name <> @candidate_english_name)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('English Name', @Orig_candidate_english_name, @candidate_english_name);
	END

	IF(@Orig_candidate_chinses_name <> @candidate_chinses_name)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Chinese Name', @Orig_candidate_chinses_name, @candidate_chinses_name);
	END

	IF(@Orig_candidate_photo <> @candidate_photo)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('ICPhoto', @Orig_candidate_photo, @candidate_photo);
	END

	IF(@Orig_candidate_unit <> @candidate_unit)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Unit', @Orig_candidate_unit, @candidate_unit);
	END

	IF(@Orig_candidate_blk_house <> @candidate_blk_house)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address BLK/House', @Orig_candidate_blk_house, @candidate_blk_house);
	END

	IF(@Orig_candidate_street_address <> @candidate_street_address)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Street', @Orig_candidate_street_address, @candidate_street_address);
	END

	IF(@Orig_candidate_postal_code <> @candidate_postal_code)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Address Postal Code', @Orig_candidate_postal_code, @candidate_postal_code);
	END
	
	IF(@Orig_candidate_transfer_reason <> @candidate_transfer_reason)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer Reason', @Orig_candidate_transfer_reason, @candidate_transfer_reason);
	END

	IF(@Orig_candidate_nationality <> @candidate_nationality)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Nationality', (SELECT CountryName FROM dbo.tb_country WHERE CountryID = @Orig_candidate_nationality), (SELECT CountryName FROM dbo.tb_country WHERE CountryID = @candidate_nationality);
	END

	IF(@Orig_candidate_dialect <> @candidate_dialect)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Dialect', ISNULL((SELECT DialectName FROM dbo.tb_dialect WHERE DialectID = @Orig_candidate_dialect), ''), ISNULL((SELECT DialectName FROM dbo.tb_dialect WHERE DialectID = @candidate_dialect), ''));
	END

	IF(@Orig_candidate_occupation <> @candidate_occupation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Occupation', (SELECT OccupationName FROM dbo.tb_occupation WHERE OccupationID = @Orig_candidate_occupation), (SELECT OccupationName FROM dbo.tb_occupation WHERE OccupationID = @candidate_occupation);
	END

	IF(@Orig_baptized_by <> @baptized_by)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Baptised By', ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @Orig_baptized_by),''), ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @baptized_by),'');
	END

	IF(@Orig_baptism_church <> @baptism_church)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Baptism Church', (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_baptism_church), (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @baptism_church);
	END

	IF(ISNULL(@Orig_candidate_baptism_date,'') <> ISNULL(@candidate_baptism_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism Date', ISNULL(@Orig_candidate_baptism_date,''), ISNULL(@candidate_baptism_date,''));
	END

	IF(@Orig_confirmation_by <> @confirmation_by)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Confirmation By', ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @Orig_confirmation_by),''), ISNULL((SELECT dbo.udf_getStafforMemberName(NRIC) FROM dbo.tb_Users WHERE NRIC = @confirmation_by),'');
	END

	IF(@Orig_confirmation_church <> @confirmation_church)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Conformation Church', (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_confirmation_church), (SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @confirmation_church);
	END

	IF(ISNULL(@Orig_candidate_confirmation_date,'') <> ISNULL(@candidate_confirmation_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Conformation Date', ISNULL(@Orig_candidate_confirmation_date,''), ISNULL(@candidate_confirmation_date,''));
	END

	IF(@Orig_previous_church_membership <> @previous_church_membership)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Previous Church Membership', ISNULL((SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @Orig_previous_church_membership),''), ISNULL((SELECT ParishName FROM dbo.tb_parish WHERE ParishID = @previous_church_membership),''));		
	END

	IF(@Orig_candidate_dob <> @candidate_dob)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Date Of Birth', @Orig_candidate_dob, @candidate_dob);
	END

	IF(@Orig_candidate_gender <> @candidate_gender)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Gender', @Orig_candidate_gender, @candidate_gender);
	END

	IF(@Orig_candidate_marital_status <> @candidate_marital_status)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Marital Status', (SELECT MaritalStatusName FROM dbo.tb_maritalstatus WHERE MaritalStatusID = @Orig_candidate_marital_status), (SELECT MaritalStatusName FROM dbo.tb_maritalstatus WHERE MaritalStatusID = @candidate_marital_status);
	END

	IF(ISNULL(@Orig_candidate_marriage_date,'') <> ISNULL(@candidate_marriage_date,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Marriage Date', ISNULL(@Orig_candidate_marriage_date,''), ISNULL(@candidate_marriage_date,''));
	END

	IF(@Orig_candidate_email <> @candidate_email)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Email', @Orig_candidate_email, @candidate_email);
	END

	IF(@Orig_candidate_education <> @candidate_education)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Education', (SELECT EducationName FROM dbo.tb_education WHERE EducationID = @Orig_candidate_education), (SELECT EducationName FROM dbo.tb_education WHERE EducationID = @candidate_education));		
	END

	IF(@Orig_candidate_language <> @candidate_language)
	BEGIN
		DECLARE @oldLang VARCHAR(1000) = '';
		DECLARE @newLang VARCHAR(1000) = '';
		
		SELECT @oldLang = @oldLang + A.LanguageName + ', ' FROM dbo.udf_Split(@Orig_candidate_language, ',')
		LEFT OUTER JOIN dbo.tb_language AS A ON A.LanguageID = items;
		
		SELECT @newLang = @newLang + A.LanguageName + ', ' FROM dbo.udf_Split(@candidate_language, ',')
		LEFT OUTER JOIN dbo.tb_language AS A ON A.LanguageID = items;
	
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Language', @oldLang, @newLang);
	END

	IF(@Orig_candidate_home_tel <> @candidate_home_tel)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Home Tel', @Orig_candidate_home_tel, @candidate_home_tel);
	END

	IF(@Orig_candidate_mobile_tel <> @candidate_mobile_tel)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Mobile Tel', @Orig_candidate_mobile_tel, @candidate_mobile_tel);
	END

	IF(@Orig_candidate_congregation <> @candidate_congregation)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Congregation', (SELECT CongregationName FROM dbo.tb_congregation WHERE CongregationID = @Orig_candidate_congregation), (SELECT CongregationName FROM dbo.tb_congregation WHERE CongregationID = @candidate_congregation);
	END

	IF(@Orig_candidate_sponsor1 <> @candidate_sponsor1)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Sponsor 1', ISNULL((SELECT dbo.udf_getStafforMemberName(@Orig_candidate_sponsor1)),''), ISNULL((SELECT dbo.udf_getStafforMemberName(@candidate_sponsor1)),'');
	END

	IF(@Orig_candidate_sponsor2 <> @candidate_sponsor2)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Sponsor 2', @Orig_candidate_sponsor2, @candidate_sponsor2);
	END
	
	IF(@Orig_candidate_sponsor2contact <> @candidate_sponsor2contact)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Sponsor 2 Contact', @Orig_candidate_sponsor2contact, @candidate_sponsor2contact);
	END
	
	IF(ISNULL(@Orig_candidate_DeceasedDate,'') <> ISNULL(@candidate_DeceasedDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Deceased Date', ISNULL(@Orig_candidate_DeceasedDate,''), ISNULL(@candidate_DeceasedDate,''));
	END
	
	IF(ISNULL(@Orig_candidate_MemberDate,'') <> ISNULL(@candidate_MemberDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Church Member as of', ISNULL(@Orig_candidate_MemberDate,''), ISNULL(@candidate_MemberDate,''));
	END
	
	IF(ISNULL(@Orig_candidate_electoralroll,'') <> ISNULL(@candidate_electoralroll,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Electoral Roll Date', ISNULL(@Orig_candidate_electoralroll,''), ISNULL(@candidate_electoralroll,''));
	END
	
	IF(@Orig_candidate_remarks <> @candidate_remarks)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Remarks', @Orig_candidate_remarks, @candidate_remarks);
	END
	
	IF(@Orig_candidate_cariu <> @candidate_cariu)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Car IU', @Orig_candidate_cariu, @candidate_cariu);
	END
	
	IF(@Orig_candidate_cellgroup <> @candidate_cellgroup)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To])
		SELECT 'Cellgroup', ISNULL((SELECT CellgroupName FROM dbo.tb_cellgroup WHERE CellgroupID = @Orig_candidate_cellgroup),''), ISNULL((SELECT CellgroupName FROM dbo.tb_cellgroup WHERE CellgroupID = @candidate_cellgroup),'');
	END
	
	IF(@Orig_baptism_by_others <> @baptism_by_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism By Others', @Orig_baptism_by_others, @baptism_by_others);
	END
	IF(@Orig_confirm_by_others <> @confirm_by_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Confirm By Others', @Orig_confirm_by_others, @confirm_by_others);
	END
	IF(@Orig_baptism_church_others <> @baptism_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism Church By Others', @Orig_baptism_church_others, @baptism_church_others);
	END
	IF(@Orig_confirm_church_others <> @confirm_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Confirm Church By Others', @Orig_confirm_church_others, @confirm_church_others);
	END
	IF(@Orig_previous_church_others <> @previous_church_others)
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Baptism By Others', @Orig_previous_church_others, @previous_church_others);
	END
	
	IF(ISNULL(@Orig_transferTo,'') <> ISNULL(@transferTo,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer To', ISNULL(@Orig_transferTo,''), ISNULL(@transferTo,''));
	END
	
	IF(ISNULL(@Orig_transferToDate,'') <> ISNULL(@transferToDate,''))
	BEGIN
		INSERT INTO @ChangesTable (ElementName, [From], [To]) VALUES ('Transfer To Date', ISNULL(@Orig_transferToDate,''), ISNULL(@transferToDate,''));
	END
	
	----------------------------
	
	DECLARE @xdoc int;
	DECLARE @familyxml AS XML = (SELECT Family FROM dbo.tb_members_temp WHERE NRIC = @candidate_original_nric);
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @familyxml;

	INSERT INTO @OriginalFamilyTable (FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion) 
	Select FamilyReligion, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion
	from OpenXml(@xdoc, '/FamilyList/*')
	with (
	FamilyType VARCHAR(100) './FamilyType',
	FamilyEnglishName VARCHAR(100) './FamilyEnglishName',
	FamilyChineseName VARCHAR(100) './FamilyChineseName',
	FamilyOccupation VARCHAR(100) './FamilyOccupation',
	FamilyReligion VARCHAR(50) './FamilyReligion');
	
	SET @familyxml = @family;
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @familyxml;
	
	INSERT INTO @FamilyTable (FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion) 
	Select FamilyReligion, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion
	from OpenXml(@xdoc, '/FamilyList/*')
	with (
	FamilyType VARCHAR(100) './FamilyType',
	FamilyEnglishName VARCHAR(100) './FamilyEnglishName',
	FamilyChineseName VARCHAR(100) './FamilyChineseName',
	FamilyOccupation VARCHAR(100) './FamilyOccupation',
	FamilyReligion VARCHAR(50) './FamilyReligion');
	
	INSERT INTO @FamilyAdded
	SELECT * FROM @FamilyTable WHERE FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion NOT IN (SELECT FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion FROM @OriginalFamilyTable)
	
	INSERT INTO @FamilyRemoved
	SELECT * FROM @OriginalFamilyTable WHERE FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion NOT IN (SELECT FamilyType+FamilyEnglishName+FamilyChineseName+FamilyOccupation+FamilyReligion FROM @FamilyTable)	
	
	-------------------------
	
	
	DECLARE @chilexml AS XML = (SELECT Child FROM dbo.tb_members_temp WHERE NRIC = @candidate_original_nric);
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @chilexml;

	INSERT INTO @OriginalChildTable (ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch) 
	Select ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch
	from OpenXml(@xdoc, '/ChildList/*')
	with (
	ChildEnglishName VARCHAR(100) './ChildEnglishName',
	ChildChineseName VARCHAR(100) './ChildChineseName',
	ChildBaptismDate VARCHAR(100) './ChildBaptismDate',
	ChildBaptismBy VARCHAR(100) './ChildBaptismBy',
	ChildChurch VARCHAR(50) './ChildChurch');
	
	SET @chilexml = @child;
	EXEC sp_xml_preparedocument @xdoc OUTPUT, @chilexml;
	
	INSERT INTO @ChildTable (ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch) 
	Select ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch
	from OpenXml(@xdoc, '/ChildList/*')
	with (
	ChildEnglishName VARCHAR(100) './ChildEnglishName',
	ChildChineseName VARCHAR(100) './ChildChineseName',
	ChildBaptismDate VARCHAR(100) './ChildBaptismDate',
	ChildBaptismBy VARCHAR(100) './ChildBaptismBy',
	ChildChurch VARCHAR(50) './ChildChurch');
	
	INSERT INTO @ChildAdded
	SELECT * FROM @ChildTable WHERE ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch NOT IN (SELECT ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch FROM @OriginalChildTable)
	
	INSERT INTO @ChildRemoved
	SELECT * FROM @OriginalChildTable WHERE ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch NOT IN (SELECT ChildEnglishName+ChildChineseName+ChildBaptismDate+ChildBaptismBy+ChildChurch FROM @ChildTable)	
	
	--------------
	
	
	DECLARE @ministryxml AS VARCHAR(MAX) = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(MAX),(SELECT MinistryInvolvement FROM dbo.tb_membersOtherInfo_temp WHERE NRIC = @candidate_original_nric)), '<Ministry>', ''), '</Ministry>', ''), '</MinistryID><MinistryID>', ','), '</MinistryID>', ''), '<MinistryID>', ''), '<Ministry/>', '');

	INSERT INTO @OriginalMinistryTable (MinistryID, MinistryName) 
	SELECT ITEMS, MinistryName FROM dbo.udf_Split(@ministryxml, ',')
	INNER JOIN dbo.tb_ministry ON MinistryID = ITEMS
	
	SET @ministryxml = REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(MAX),@candidate_ministry), '<Ministry>', ''), '</Ministry>', ''), '</MinistryID><MinistryID>', ','), '</MinistryID>', ''), '<MinistryID>', ''), '<Ministry/>', '');
	
	INSERT INTO @MinistryTable (MinistryID, MinistryName) 
	SELECT ITEMS, MinistryName FROM dbo.udf_Split(@ministryxml, ',')
	INNER JOIN dbo.tb_ministry ON MinistryID = ITEMS
	
	INSERT INTO @MinistryTableAdded
	SELECT * FROM @MinistryTable WHERE MinistryID NOT IN (SELECT MinistryID FROM @OriginalMinistryTable)
	
	INSERT INTO @MinistryTableRemoved
	SELECT * FROM @OriginalMinistryTable WHERE MinistryID NOT IN (SELECT MinistryID FROM @MinistryTable)	
	
	--------------
	
	
	
	DECLARE @returnTable TABLE (
		FromTo XML,
		FamilyRemoved XML,
		FamilyAdded XML,
		ChildRemoved XML,
		ChileAdded XML,
		MinistryAdded XML,
		MinistryRemoved XML,
		FileAdded XML);
		
	IF EXISTS (SELECT 1 FROM @ChangesTable)
	OR EXISTS (SELECT 1 FROM @FamilyRemoved)
	OR EXISTS (SELECT 1 FROM @FamilyAdded)
	OR EXISTS (SELECT 1 FROM @ChildAdded)
	OR EXISTS (SELECT 1 FROM @ChildRemoved)
	OR EXISTS (SELECT 1 FROM @MinistryTableAdded)
	OR EXISTS (SELECT 1 FROM @MinistryTableRemoved)
	OR EXISTS (SELECT 1 FROM @FileAdded)
	BEGIN
		INSERT INTO @returnTable (FromTo, FamilyRemoved, FamilyAdded, MinistryRemoved, MinistryAdded, ChildRemoved, ChileAdded, FileAdded)
		SELECT (SELECT ElementName, [From], [To] FROM @ChangesTable FOR XML RAW('Changes'), ELEMENTS),
		(SELECT (SELECT FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion FROM @FamilyRemoved FOR XML RAW('Family'), ELEMENTS)),
		(SELECT (SELECT FamilyType, FamilyEnglishName, FamilyChineseName, FamilyOccupation, FamilyReligion FROM @FamilyAdded FOR XML RAW('Family'), ELEMENTS)),
		(SELECT (SELECT MinistryName FROM @MinistryTableRemoved FOR XML RAW('Ministry'), ELEMENTS)),
		(SELECT (SELECT MinistryName FROM @MinistryTableAdded FOR XML RAW('Ministry'), ELEMENTS)),
		(SELECT (SELECT ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch FROM @ChildRemoved FOR XML RAW('Child'), ELEMENTS)),
		(SELECT (SELECT ChildEnglishName, ChildChineseName, ChildBaptismDate, ChildBaptismBy, ChildChurch FROM @ChildAdded FOR XML RAW('Child'), ELEMENTS)),
		(SELECT (SELECT [filename], [GUID], FileType, Fileremarks FROM @FileAdded FOR XML RAW('AttachmentAdded'), ELEMENTS));
		
		DECLARE @changesXML AS XML = (
		SELECT FromTo, FamilyRemoved, FamilyAdded, ChildRemoved, ChileAdded, MinistryRemoved, MinistryAdded, FileAdded FROM @returnTable FOR XML RAW('Changes'), ELEMENTS);
		
		
		
		UPDATE tb_members_temp SET   Salutation = @candidate_salutation,
							NRIC = @candidate_nric,
							ICPhoto = @candidate_photo,
							EnglishName = @candidate_english_name,
							AddressUnit = @candidate_unit,
							AddressHouseBlk = @candidate_blk_house,
							Nationality = @candidate_nationality,
							Dialect = @candidate_dialect,
							Occupation = @candidate_occupation,
							BaptismBy = @baptized_by,
							BaptismChurch = @baptism_church,
							ConfirmBy = @confirmation_by,
							ConfirmChurch = @confirmation_church,
							PreviousChurch = @previous_church_membership,
							ChineseName = @candidate_chinses_name,
							DOB = @candidate_dob,
							Gender = @candidate_gender,
							MaritalStatus = @candidate_marital_status,
							AddressStreet = @candidate_street_address,
							AddressPostalCode = @candidate_postal_code,
							Email = @candidate_email,
							Education = @candidate_education,
							[Language] = @candidate_language,
							HomeTel = @candidate_home_tel,
							MobileTel = @candidate_mobile_tel,
							TransferReason = @candidate_transfer_reason,
							CarIU = @candidate_cariu,
							BaptismDate = CONVERT(DATETIME, @candidate_baptism_date, 103),
							ConfirmDate = CONVERT(DATETIME, @candidate_confirmation_date, 103),
							MarriageDate = CONVERT(DATETIME, @candidate_marriage_date, 103),
							CurrentParish = @CurrentParish,
							DeceasedDate = CONVERT(DATETIME, @candidate_DeceasedDate, 103),
							Family = @family,
							Child = @child,
							BaptismByOthers = @baptism_by_others,
							ConfirmByOthers = @confirm_by_others,
							BaptismChurchOthers = @baptism_church_others,
							ConfirmChurchOthers = @confirm_church_others,
							PreviousChurchOthers = @previous_church_others
		WHERE NRIC = @candidate_original_nric
			
		UPDATE dbo.tb_membersOtherInfo_temp SET Congregation = @candidate_congregation,
									   NRIC = @candidate_nric,
									   ElectoralRoll = CONVERT(DATETIME, @candidate_electoralroll, 103),
									   CellGroup = @candidate_cellgroup,
									   MinistryInvolvement = @candidate_ministry,
									   Sponsor1 = @candidate_sponsor1,
									   Sponsor2 = @candidate_sponsor2,
									   Sponsor2Contact = @candidate_sponsor2contact,
									   Remarks = @candidate_remarks,
									   TransferTo = @transferTo,
									   TransferToDate = CONVERT(DATE, @transferToDate, 103),
									   MemberDate = @candidate_MemberDate
		WHERE NRIC = @candidate_original_nric
		
		SELECT 'Updated' AS Result;
		
		EXEC dbo.usp_insertlogging 'I', @UserID, 'Membership', 'Update', 1, 'NRIC', @candidate_nric, @changesXML;
	END
	ELSE
	BEGIN
		SELECT 'NoChange' AS Result;
	END
END
ELSE
BEGIN		
	SELECT 'NotFound' AS Result
END

SET NOCOUNT OFF;

GO

--UPDATE dbo.tb_App_Config set value = 'Server' where configname = 'PostalCodeRetrival'

--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'ErrorRecipients', 'zniter81@gmail.com'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'SMTPAccount', 'postmaster@samisemail.mailgun.org'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'SMTPAddress', 'smtp.mailgun.org'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'SMTPAccountPassword', 'P@ssw0rd'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'SystemMode', 'FULL'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'SamisRegistrationRecipients', 'zniter81@gmail.com'
--INSERT INTO dbo.tb_App_Config(ConfigName, value)
--SELECT 'CERegistrationRecipients', 'zniter81@gmail.com'

--SET IDENTITY_INSERT [dbo].[tb_school] ON
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (191, N'Admiralty Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (192, N'Ahmad Ibrahim Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (193, N'Anderson Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (194, N'Ang Mo Kio Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (195, N'Anglican High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (196, N'Anglo-Chinese Sch (Barker Road)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (197, N'Assumption English Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (198, N'Balestier Hill Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (199, N'Bartley Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (200, N'Beatty Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (201, N'Bedok Green Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (202, N'Bedok North Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (203, N'Bedok South Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (204, N'Bedok Town Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (205, N'Bedok View Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (206, N'Bendemeer Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (207, N'Bishan Park Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (208, N'Boon Lay Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (209, N'Bowen Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (210, N'Broadrick Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (211, N'Bukit Batok Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (212, N'Bukit Merah Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (213, N'Bukit Panjang Govt. High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (214, N'Bukit View Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (215, N'Canberra Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (216, N'Catholic High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (217, N'Cedar Girls'' Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (218, N'Changkat Changi Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (219, N'Chestnut Drive Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (220, N'CHIJ Katong Convent')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (221, N'CHIJ Sec (Toa Payoh)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (222, N'CHIJ St. Joseph''s Convent')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (223, N'CHIJ St. Nicholas Girls'' Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (224, N'CHIJ St. Theresa''s Convent')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (225, N'Chong Boon Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (226, N'Christ Church Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (227, N'Chua Chu Kang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (228, N'Chung Cheng High Sch (Main)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (229, N'Chung Cheng High Sch (Yishun)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (230, N'Clementi Town Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (231, N'Clementi Woods Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (232, N'Commonwealth Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (233, N'Compassvale Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (234, N'Coral Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (235, N'Crescent Girls'' Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (236, N'Damai Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (237, N'Deyi Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (238, N'Dunearn Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (239, N'Dunman High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (240, N'Dunman Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (241, N'East Spring Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (242, N'East View Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (243, N'Edgefield Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (244, N'Evergreen Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (245, N'Fairfield Methodist Sch (Sec)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (246, N'Fairfield Methodist Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (247, N'Fajar Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (248, N'First Toa Payoh Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (249, N'Fuchun Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (250, N'Fuhua Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (251, N'Gan Eng Seng Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (252, N'Geylang Methodist Sch (Sec)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (253, N'Greendale Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (254, N'Greenridge Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (255, N'Greenview Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (256, N'Guangyang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (257, N'Hai Sing Catholic Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (258, N'Henderson Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (259, N'Hillgrove Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (260, N'Holy Innocents'' High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (261, N'Hong Kah Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (262, N'Hougang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (263, N'Hua Yi Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (264, N'Junyuan Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (265, N'Jurong Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (266, N'Jurong West Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (267, N'Jurongville Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (268, N'Juying Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (269, N'Kent Ridge Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (270, N'Kranji Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (271, N'Kuo Chuan Presbyterian Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (272, N'Loyang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (273, N'MacPherson Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (274, N'Manjusri Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (275, N'Maris Stella High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (276, N'Marsiling Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (277, N'Mayflower Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (278, N'Montfort Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (279, N'Nan Chiau High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (280, N'Nan Hua High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (281, N'Naval Base Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (282, N'New Town Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (283, N'Ngee Ann Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (284, N'North View Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (285, N'North Vista Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (286, N'Northbrooks Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (287, N'Northland Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (288, N'Orchid Park Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (289, N'Outram Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (290, N'Pasir Ris Crest Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (291, N'Pasir Ris Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (292, N'Paya Lebar Methodist Girls'' Sch (Sec)')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (293, N'Pei Hwa Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (294, N'Peicai Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (295, N'Peirce Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (296, N'Ping Yi Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (297, N'Pioneer Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (298, N'Presbyterian High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (299, N'Punggol Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (300, N'Queenstown Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (301, N'Queensway Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (302, N'Regent Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (303, N'River Valley High Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (304, N'Riverside Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (305, N'Sembawang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (306, N'Seng Kang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (307, N'Serangoon Garden Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (308, N'Serangoon Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (309, N'Shuqun Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (310, N'Si Ling Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (311, N'Siglap Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (312, N'Springfield Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (313, N'St. Andrew''s Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (314, N'St. Anthony''s Canossian Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (315, N'St. Gabriel''s Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (316, N'St. Hilda''s Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (317, N'St. Margaret''s Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (318, N'St. Patrick''s Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (319, N'Swiss Cottage Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (320, N'Tampines Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (321, N'Tanglin Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (322, N'Tanjong Katong Girls'' Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (323, N'Tanjong Katong Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (324, N'Teck Whye Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (325, N'Temasek Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (326, N'Unity Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (327, N'Victoria Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (328, N'West Spring Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (329, N'Westwood Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (330, N'Whitley Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (331, N'Woodgrove Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (332, N'Woodlands Ring Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (333, N'Woodlands Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (334, N'Xinmin Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (335, N'Yio Chu Kang Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (336, N'Yishun Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (337, N'Yishun Town Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (338, N'Yuan Ching Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (339, N'Yuhua Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (340, N'Yusof Ishak Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (341, N'Yuying Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (342, N'Zhenghua Sec Sch')
--INSERT [dbo].[tb_school] ([SchoolID], [SchoolName]) VALUES (343, N'Zhonghua Sec Sch')
--SET IDENTITY_INSERT [dbo].[tb_school] OFF

--SET IDENTITY_INSERT [dbo].[tb_emailContent] ON
--INSERT [dbo].[tb_emailContent] ([EmailID], [EmailType], [EmailContent]) VALUES (1, N'GreenForm', N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head><title>SAMIS New Membership</title><style type="text/css">    body { font-family:Calibri; }    table { border-collapse: collapse; }     td, th { padding: .3em; border: 1px #ccc solid; white-space: nowrap;}</style></head>  <body>  Dear SAMIS Administrator,<br />  <br />  System has received a Green Form Registration request. Below is the information of the person. <br /><br />
--<style>
--    table.dottedview
--    {
--        empty-cells: hide;
--	    width: 100%;
--    }

--    table.dottedview td {
--	    font-family:arial, verdana, sans-serif;
--	    font-size: 10px;
--	    padding: 10px;
--	    vertical-align:top;
--	    border-right: 1px none #C0C0C0;
--	    border-bottom: 1px none #C0C0C0;
	
--    }
--</style>

--<table border="1" class="dottedview">
--    <tr>
--        <td style=" background-color:Orange">Salutation</td>
--        <td style=" width:200px">[Salutation]</td>

--        <td style=" background-color:Orange">English Name</td>
--        <td style=" width:200px">[English Name]</td>

--        <td style=" background-color:Orange">Chinese Name</td>
--        <td style=" width:200px">[Chinese Name]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Date Of Birth</td>
--        <td>[DOB]</td>

--        <td style=" background-color:Orange">Gender</td>
--        <td>[Gender]</td>

--        <td style=" background-color:Orange">NRIC</td>
--        <td>[NRIC]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Nationality</td>
--        <td>[Nationality]</td>

--        <td style=" background-color:Orange">Dialect</td>
--        <td>[Dialect]</td>

--        <td style=" background-color:Orange">Marital Status</td>
--        <td>[Marital Status],[Marital Status Date]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Postal Code</td>
--        <td>[Postal Code]</td>

--        <td style=" background-color:Orange">Email</td>
--        <td>[Email]</td>

--        <td style=" background-color:Orange">Education</td>
--        <td>[Education]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Blk/House</td>
--        <td>[Blk House]</td>

--        <td style=" background-color:Orange">Language</td>
--        <td>[Language]</td>

--        <td style=" background-color:Orange">Occupation</td>
--        <td>[Occupation]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Unit</td>
--        <td>[Unit]</td>

--        <td style=" background-color:Orange">Home Tel</td>
--        <td>[Home Tel]</td>

--        <td style=" background-color:Orange">Mobile Tel</td>
--        <td>[Mobile Tel]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Street Address</td>
--        <td>[Street Address]</td>

--        <td style=" background-color:Orange">Mobile Tel</td>
--        <td>[Mobile Tel]</td>

--        <td style=" background-color:Orange">Congregation</td>
--        <td>[Congregation]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Sponsor 1</td>
--        <td>[Sponsor 1]</td>

--        <td style=" background-color:Orange">Sponsor 2</td>
--        <td>[Sponsor 2]</td>

--        <td style=" background-color:Orange">Sponsor 2 Contact</td>
--        <td>[Sponsor 2 Contact]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Baptism Date</td>
--        <td>[Baptism Date]</td>

--        <td style=" background-color:Orange">Baptism By</td>
--        <td>[Baptism By],[Baptism By Others]</td>

--        <td style=" background-color:Orange">Baptism Church</td>
--        <td>[Baptism Church],[Baptism Church Others]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Confirmation Date</td>
--        <td>[Confirmation Date]</td>

--        <td style=" background-color:Orange">Confirmation By</td>
--        <td>[Confirmation By],[Confirmation By Others]</td>

--        <td style=" background-color:Orange">Confirmation Church</td>
--        <td>[Confirmation Church],[Confirmation Church Others]</td>
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Previous Church Membership</td>
--        <td>[Previous Church Membership],[Previous Church Membership Others]</td>

--        <td style=" background-color:Orange">Transfer Reason</td>
--        <td colspan="3">[Transfer Reason]</td>        
--    </tr>
--     <tr>
--        <td colspan="6" style=" padding:2.5% 2.5% 2.5% 2.5%">
--            <table width="100%" border="0" style=" border-color:Orange">
--                <tr>
--                    <td style=" background-color:Orange">Family</td>
--                    <td style=" background-color:Orange">English Name</td>
--                    <td style=" background-color:Orange">Chinese Name</td>
--                    <td style=" background-color:Orange">Occupation</td>
--                    <td style=" background-color:Orange">Religion</td>
--                </tr>
--                [Family]
--            </table>
--         </td>       
--    </tr>
--    <tr>
--        <td colspan="6"  style=" padding:2.5% 2.5% 2.5% 2.5%">
--            <table width="100%">
--                <tr>
--                    <td style=" background-color:Orange">English Name</td>
--                    <td style=" background-color:Orange">Chinese Name</td>
--                    <td style=" background-color:Orange">Baptism Date</td>
--                    <td style=" background-color:Orange">Baptism By</td>
--                    <td style=" background-color:Orange">Church</td>
--                </tr>
--                [Child]
--            </table>
--        </td>       
--    </tr>
--    <tr>
--        <td style=" background-color:Orange">Join Cellgroup</td>
--        <td>[Join Cellgroup]</td>

--        <td style=" background-color:Orange">Serve in my congregation</td>
--        <td>[Serve Congregation]</td>

--        <td style=" background-color:Orange">Be a tithing member</td>
--        <td>[Tithing Member]</td>
--    </tr>    
--    <tr>
--        <td style=" background-color:Orange">Join Ministry</td>
--        <td colspan="5">[Join Ministry]</td>        
--    </tr>
--</table>

--<br /><br /> [attachment] <br /><br />
--Offline Submission Content<br />
--[xmlcontent] Regards,  <br />  <br /><hr>  <span style="font-style:italic; font-size:12px; padding-top:0">This is an automated email notification from http://samis2.apphb.com/</span>  </body>  </html>')
--INSERT [dbo].[tb_emailContent] ([EmailID], [EmailType], [EmailContent]) VALUES (2, N'CourseRegistration', N'<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" ><head><title>SAMIS New Membership</title><style type="text/css">    body { font-family:Calibri; }    table { border-collapse: collapse; }     td, th { padding: .3em; border: 1px #ccc solid; white-space: nowrap;}</style></head>  <body>  Dear CE Administrator,<br />  <br />  System has received a CE Registration request. Below is the information of the person.  <br /><br />
--<style>
--    table.dottedview
--    {
--        empty-cells: hide;
--	    width: 100%;
--    }

--    table.dottedview td {
--	    font-family:arial, verdana, sans-serif;
--	    font-size: 10px;
--	    padding: 10px;
--	    vertical-align:top;
--	    border-right: 1px none #C0C0C0;
--	    border-bottom: 1px none #C0C0C0;
	
--    }
--</style>

--<table border="1" class="dottedview">
--    <tr>
--        <td style=" background-color:Orange">Course</td>
--        <td style=''width:200px''>[candidate_course_name]</td>
        
--        <td style=" background-color:Orange">NRIC</td>
--        <td style=''width:200px''>[candidate_nric]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Salutation</td>
--        <td>[candidate_salutation]</td>
        
--        <td style=" background-color:Orange">English Name</td>
--        <td>[candidate_english_name]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Date of Birth</td>
--        <td>[candidate_dob]</td>
        
--        <td style=" background-color:Orange">Gender</td>
--        <td>[candidate_gender]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Nationality</td>
--        <td>[candidate_nationality]</td>
        
--        <td style=" background-color:Orange">Education</td>
--        <td>[candidate_education]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Church</td>
--        <td>[candidate_church]</td>
        
--        <td style=" background-color:Orange">Occupation</td>
--        <td>[candidate_occupation]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Church Others</td>
--        <td colspan=''3''>[candidate_church_others]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Postal Code</td>
--        <td>[candidate_postal_code]</td>
        
--        <td style=" background-color:Orange">Blk/House</td>
--        <td>[candidate_blk_house]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Contact</td>
--        <td>[candidate_contact]</td>
        
--        <td style=" background-color:Orange">Email</td>
--        <td>[candidate_email]</td>
--     </tr>
--     <tr>
--        <td style=" background-color:Orange">Unit</td>
--        <td>[candidate_unit]</td>
        
--        <td style=" background-color:Orange">Street Address</td>
--        <td>[candidate_street_address]</td>
--     </tr>
--</table>

--<br /><br /> 
--Regards,  <br />  <br /><hr>  <span style="font-style:italic; font-size:12px; padding-top:0">This is an automated email notification from http://samis2.apphb.com/</span>  </body>  </html>')
--SET IDENTITY_INSERT [dbo].[tb_emailContent] OFF